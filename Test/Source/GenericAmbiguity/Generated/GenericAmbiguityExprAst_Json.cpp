/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:ExprAst
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "GenericAmbiguityExprAst_Json.h"

namespace genericambiguity::json_visitor
{
	void ExprAstVisitor::PrintFields(BinaryExpr* node)
	{
		BeginField(vl::WString::Unmanaged(L"left"));
		Print(node->left.Obj());
		EndField();
		BeginField(vl::WString::Unmanaged(L"op"));
		switch (node->op)
		{
		case genericambiguity::BinaryOp::GT:
			WriteString(vl::WString::Unmanaged(L"GT"));
			break;
		case genericambiguity::BinaryOp::LT:
			WriteString(vl::WString::Unmanaged(L"LT"));
			break;
		default:
			WriteNull();
		}
		EndField();
		BeginField(vl::WString::Unmanaged(L"right"));
		Print(node->right.Obj());
		EndField();
	}
	void ExprAstVisitor::PrintFields(CallExpr* node)
	{
		BeginField(vl::WString::Unmanaged(L"args"));
		BeginArray();
		for (auto&& listItem : node->args)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
		BeginField(vl::WString::Unmanaged(L"func"));
		Print(node->func.Obj());
		EndField();
	}
	void ExprAstVisitor::PrintFields(DecrementExpr* node)
	{
		BeginField(vl::WString::Unmanaged(L"expr"));
		Print(node->expr.Obj());
		EndField();
	}
	void ExprAstVisitor::PrintFields(Expr* node)
	{
	}
	void ExprAstVisitor::PrintFields(ExprToResolve* node)
	{
		BeginField(vl::WString::Unmanaged(L"candidates"));
		BeginArray();
		for (auto&& listItem : node->candidates)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
	}
	void ExprAstVisitor::PrintFields(GenericExpr* node)
	{
		BeginField(vl::WString::Unmanaged(L"args"));
		BeginArray();
		for (auto&& listItem : node->args)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
		BeginField(vl::WString::Unmanaged(L"name"));
		WriteToken(node->name);
		EndField();
	}
	void ExprAstVisitor::PrintFields(Module* node)
	{
		BeginField(vl::WString::Unmanaged(L"expr"));
		Print(node->expr.Obj());
		EndField();
	}
	void ExprAstVisitor::PrintFields(PostfixExpr* node)
	{
		BeginField(vl::WString::Unmanaged(L"expr"));
		Print(node->expr.Obj());
		EndField();
		BeginField(vl::WString::Unmanaged(L"op"));
		switch (node->op)
		{
		case genericambiguity::PostfixOp::Add:
			WriteString(vl::WString::Unmanaged(L"Add"));
			break;
		case genericambiguity::PostfixOp::Increment:
			WriteString(vl::WString::Unmanaged(L"Increment"));
			break;
		case genericambiguity::PostfixOp::Sub:
			WriteString(vl::WString::Unmanaged(L"Sub"));
			break;
		default:
			WriteNull();
		}
		EndField();
	}
	void ExprAstVisitor::PrintFields(RefExpr* node)
	{
		BeginField(vl::WString::Unmanaged(L"name"));
		WriteToken(node->name);
		EndField();
	}

	void ExprAstVisitor::Visit(ExprToResolve* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"ExprToResolve"), node);
		PrintFields(static_cast<Expr*>(node));
		PrintFields(static_cast<ExprToResolve*>(node));
		EndObject();
	}

	void ExprAstVisitor::Visit(RefExpr* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"RefExpr"), node);
		PrintFields(static_cast<Expr*>(node));
		PrintFields(static_cast<RefExpr*>(node));
		EndObject();
	}

	void ExprAstVisitor::Visit(GenericExpr* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"GenericExpr"), node);
		PrintFields(static_cast<Expr*>(node));
		PrintFields(static_cast<GenericExpr*>(node));
		EndObject();
	}

	void ExprAstVisitor::Visit(CallExpr* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"CallExpr"), node);
		PrintFields(static_cast<Expr*>(node));
		PrintFields(static_cast<CallExpr*>(node));
		EndObject();
	}

	void ExprAstVisitor::Visit(PostfixExpr* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"PostfixExpr"), node);
		PrintFields(static_cast<Expr*>(node));
		PrintFields(static_cast<PostfixExpr*>(node));
		EndObject();
	}

	void ExprAstVisitor::Visit(DecrementExpr* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"DecrementExpr"), node);
		PrintFields(static_cast<Expr*>(node));
		PrintFields(static_cast<DecrementExpr*>(node));
		EndObject();
	}

	void ExprAstVisitor::Visit(BinaryExpr* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"BinaryExpr"), node);
		PrintFields(static_cast<Expr*>(node));
		PrintFields(static_cast<BinaryExpr*>(node));
		EndObject();
	}

	ExprAstVisitor::ExprAstVisitor(vl::stream::StreamWriter& _writer)
		: vl::glr::JsonVisitorBase(_writer)
	{
	}

	void ExprAstVisitor::Print(Expr* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		node->Accept(static_cast<Expr::IVisitor*>(this));
	}

	void ExprAstVisitor::Print(Module* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"Module"), node);
		PrintFields(static_cast<Module*>(node));
		EndObject();
	}

}
