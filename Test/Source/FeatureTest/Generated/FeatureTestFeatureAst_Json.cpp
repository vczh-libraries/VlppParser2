/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:FeatureAst
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "FeatureTestFeatureAst_Json.h"

namespace featuretest::json_visitor
{
	void FeatureAstVisitor::PrintFields(BranchedOptionalFeature* node)
	{
		BeginField(vl::WString::Unmanaged(L"optional"));
		Print(node->optional.Obj());
		EndField();
		BeginField(vl::WString::Unmanaged(L"tails"));
		BeginArray();
		for (auto&& listItem : node->tails)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
		BeginField(vl::WString::Unmanaged(L"type"));
		switch (node->type)
		{
		case featuretest::BranchType::Minus:
			WriteString(vl::WString::Unmanaged(L"Minus"));
			break;
		case featuretest::BranchType::NoCompetition:
			WriteString(vl::WString::Unmanaged(L"NoCompetition"));
			break;
		case featuretest::BranchType::Plus:
			WriteString(vl::WString::Unmanaged(L"Plus"));
			break;
		default:
			WriteNull();
		}
		EndField();
	}
	void FeatureAstVisitor::PrintFields(ClFeature* node)
	{
		BeginField(vl::WString::Unmanaged(L"id"));
		WriteToken(node->id);
		EndField();
	}
	void FeatureAstVisitor::PrintFields(FaFeature* node)
	{
		BeginField(vl::WString::Unmanaged(L"fa"));
		switch (node->fa)
		{
		case featuretest::FieldAssignment::A:
			WriteString(vl::WString::Unmanaged(L"A"));
			break;
		case featuretest::FieldAssignment::B:
			WriteString(vl::WString::Unmanaged(L"B"));
			break;
		default:
			WriteNull();
		}
		EndField();
	}
	void FeatureAstVisitor::PrintFields(Feature* node)
	{
	}
	void FeatureAstVisitor::PrintFields(FeatureToResolve* node)
	{
		BeginField(vl::WString::Unmanaged(L"candidates"));
		BeginArray();
		for (auto&& listItem : node->candidates)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
	}
	void FeatureAstVisitor::PrintFields(Gt* node)
	{
	}
	void FeatureAstVisitor::PrintFields(Lt* node)
	{
	}
	void FeatureAstVisitor::PrintFields(NestedOptionalFeature* node)
	{
		BeginField(vl::WString::Unmanaged(L"optional"));
		Print(node->optional.Obj());
		EndField();
		BeginField(vl::WString::Unmanaged(L"tail1"));
		Print(node->tail1.Obj());
		EndField();
		BeginField(vl::WString::Unmanaged(L"tail2"));
		Print(node->tail2.Obj());
		EndField();
		BeginField(vl::WString::Unmanaged(L"tail3"));
		Print(node->tail3.Obj());
		EndField();
		BeginField(vl::WString::Unmanaged(L"tails"));
		BeginArray();
		for (auto&& listItem : node->tails)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
	}
	void FeatureAstVisitor::PrintFields(OptionalFeature* node)
	{
		BeginField(vl::WString::Unmanaged(L"loop"));
		BeginArray();
		for (auto&& listItem : node->loop)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
		BeginField(vl::WString::Unmanaged(L"optional"));
		Print(node->optional.Obj());
		EndField();
		BeginField(vl::WString::Unmanaged(L"priority"));
		switch (node->priority)
		{
		case featuretest::OptionalProprity::Equal:
			WriteString(vl::WString::Unmanaged(L"Equal"));
			break;
		case featuretest::OptionalProprity::PreferSkip:
			WriteString(vl::WString::Unmanaged(L"PreferSkip"));
			break;
		case featuretest::OptionalProprity::PreferTake:
			WriteString(vl::WString::Unmanaged(L"PreferTake"));
			break;
		default:
			WriteNull();
		}
		EndField();
	}
	void FeatureAstVisitor::PrintFields(PbaFeature* node)
	{
		BeginField(vl::WString::Unmanaged(L"gts"));
		BeginArray();
		for (auto&& listItem : node->gts)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
		BeginField(vl::WString::Unmanaged(L"lts"));
		BeginArray();
		for (auto&& listItem : node->lts)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
		BeginField(vl::WString::Unmanaged(L"optional"));
		Print(node->optional.Obj());
		EndField();
		BeginField(vl::WString::Unmanaged(L"tail"));
		Print(node->tail.Obj());
		EndField();
		BeginField(vl::WString::Unmanaged(L"tails"));
		BeginArray();
		for (auto&& listItem : node->tails)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
	}
	void FeatureAstVisitor::PrintFields(Plus* node)
	{
	}
	void FeatureAstVisitor::PrintFields(Pwa1Feature* node)
	{
		BeginField(vl::WString::Unmanaged(L"gts"));
		BeginArray();
		for (auto&& listItem : node->gts)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
		BeginField(vl::WString::Unmanaged(L"lts"));
		BeginArray();
		for (auto&& listItem : node->lts)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
		BeginField(vl::WString::Unmanaged(L"pba"));
		Print(node->pba.Obj());
		EndField();
	}
	void FeatureAstVisitor::PrintFields(PwlFeature* node)
	{
		BeginField(vl::WString::Unmanaged(L"one"));
		BeginArray();
		for (auto&& listItem : node->one)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
		BeginField(vl::WString::Unmanaged(L"prefix"));
		BeginArray();
		for (auto&& listItem : node->prefix)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
		BeginField(vl::WString::Unmanaged(L"prev"));
		Print(node->prev.Obj());
		EndField();
		BeginField(vl::WString::Unmanaged(L"two"));
		BeginArray();
		for (auto&& listItem : node->two)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
	}

	void FeatureAstVisitor::Visit(FeatureToResolve* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"FeatureToResolve"), node);
		PrintFields(static_cast<Feature*>(node));
		PrintFields(static_cast<FeatureToResolve*>(node));
		EndObject();
	}

	void FeatureAstVisitor::Visit(OptionalFeature* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"OptionalFeature"), node);
		PrintFields(static_cast<Feature*>(node));
		PrintFields(static_cast<OptionalFeature*>(node));
		EndObject();
	}

	void FeatureAstVisitor::Visit(NestedOptionalFeature* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"NestedOptionalFeature"), node);
		PrintFields(static_cast<Feature*>(node));
		PrintFields(static_cast<NestedOptionalFeature*>(node));
		EndObject();
	}

	void FeatureAstVisitor::Visit(BranchedOptionalFeature* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"BranchedOptionalFeature"), node);
		PrintFields(static_cast<Feature*>(node));
		PrintFields(static_cast<BranchedOptionalFeature*>(node));
		EndObject();
	}

	void FeatureAstVisitor::Visit(PbaFeature* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"PbaFeature"), node);
		PrintFields(static_cast<Feature*>(node));
		PrintFields(static_cast<PbaFeature*>(node));
		EndObject();
	}

	void FeatureAstVisitor::Visit(Pwa1Feature* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"Pwa1Feature"), node);
		PrintFields(static_cast<Feature*>(node));
		PrintFields(static_cast<Pwa1Feature*>(node));
		EndObject();
	}

	void FeatureAstVisitor::Visit(PwlFeature* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"PwlFeature"), node);
		PrintFields(static_cast<Feature*>(node));
		PrintFields(static_cast<PwlFeature*>(node));
		EndObject();
	}

	void FeatureAstVisitor::Visit(ClFeature* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"ClFeature"), node);
		PrintFields(static_cast<Feature*>(node));
		PrintFields(static_cast<ClFeature*>(node));
		EndObject();
	}

	void FeatureAstVisitor::Visit(FaFeature* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"FaFeature"), node);
		PrintFields(static_cast<Feature*>(node));
		PrintFields(static_cast<FaFeature*>(node));
		EndObject();
	}

	FeatureAstVisitor::FeatureAstVisitor(vl::stream::StreamWriter& _writer)
		: vl::glr::JsonVisitorBase(_writer)
	{
	}

	void FeatureAstVisitor::Print(Feature* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		node->Accept(static_cast<Feature::IVisitor*>(this));
	}

	void FeatureAstVisitor::Print(Plus* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"Plus"), node);
		PrintFields(static_cast<Plus*>(node));
		EndObject();
	}

	void FeatureAstVisitor::Print(Lt* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"Lt"), node);
		PrintFields(static_cast<Lt*>(node));
		EndObject();
	}

	void FeatureAstVisitor::Print(Gt* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"Gt"), node);
		PrintFields(static_cast<Gt*>(node));
		EndObject();
	}

}
