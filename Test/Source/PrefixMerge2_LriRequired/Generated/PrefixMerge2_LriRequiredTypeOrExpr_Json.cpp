/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:TypeOrExpr
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "PrefixMerge2_LriRequiredTypeOrExpr_Json.h"

namespace prefixmerge2_lrirequired::json_visitor
{
	void TypeOrExprVisitor::PrintFields(CallExpr* node)
	{
		BeginField(vl::WString::Unmanaged(L"args"));
		BeginArray();
		for (auto&& listItem : node->args)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
		BeginField(vl::WString::Unmanaged(L"func"));
		Print(node->func.Obj());
		EndField();
	}
	void TypeOrExprVisitor::PrintFields(ConstType* node)
	{
		BeginField(vl::WString::Unmanaged(L"type"));
		Print(node->type.Obj());
		EndField();
	}
	void TypeOrExprVisitor::PrintFields(FunctionType* node)
	{
		BeginField(vl::WString::Unmanaged(L"args"));
		BeginArray();
		for (auto&& listItem : node->args)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
		BeginField(vl::WString::Unmanaged(L"returnType"));
		Print(node->returnType.Obj());
		EndField();
	}
	void TypeOrExprVisitor::PrintFields(MemberName* node)
	{
		BeginField(vl::WString::Unmanaged(L"member"));
		WriteToken(node->member);
		EndField();
		BeginField(vl::WString::Unmanaged(L"parent"));
		Print(node->parent.Obj());
		EndField();
	}
	void TypeOrExprVisitor::PrintFields(MulExpr* node)
	{
		BeginField(vl::WString::Unmanaged(L"first"));
		Print(node->first.Obj());
		EndField();
		BeginField(vl::WString::Unmanaged(L"second"));
		Print(node->second.Obj());
		EndField();
	}
	void TypeOrExprVisitor::PrintFields(Name* node)
	{
		BeginField(vl::WString::Unmanaged(L"name"));
		WriteToken(node->name);
		EndField();
	}
	void TypeOrExprVisitor::PrintFields(PointerType* node)
	{
		BeginField(vl::WString::Unmanaged(L"type"));
		Print(node->type.Obj());
		EndField();
	}
	void TypeOrExprVisitor::PrintFields(QualifiedName* node)
	{
	}
	void TypeOrExprVisitor::PrintFields(TypeOrExpr* node)
	{
	}
	void TypeOrExprVisitor::PrintFields(TypeOrExprToResolve* node)
	{
		BeginField(vl::WString::Unmanaged(L"candidates"));
		BeginArray();
		for (auto&& listItem : node->candidates)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
	}

	void TypeOrExprVisitor::Visit(TypeOrExprToResolve* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"TypeOrExprToResolve"), node);
		PrintFields(static_cast<TypeOrExpr*>(node));
		PrintFields(static_cast<TypeOrExprToResolve*>(node));
		EndObject();
	}

	void TypeOrExprVisitor::Visit(QualifiedName* node)
	{
		node->Accept(static_cast<QualifiedName::IVisitor*>(this));
	}

	void TypeOrExprVisitor::Visit(CallExpr* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"CallExpr"), node);
		PrintFields(static_cast<TypeOrExpr*>(node));
		PrintFields(static_cast<CallExpr*>(node));
		EndObject();
	}

	void TypeOrExprVisitor::Visit(MulExpr* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"MulExpr"), node);
		PrintFields(static_cast<TypeOrExpr*>(node));
		PrintFields(static_cast<MulExpr*>(node));
		EndObject();
	}

	void TypeOrExprVisitor::Visit(ConstType* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"ConstType"), node);
		PrintFields(static_cast<TypeOrExpr*>(node));
		PrintFields(static_cast<ConstType*>(node));
		EndObject();
	}

	void TypeOrExprVisitor::Visit(PointerType* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"PointerType"), node);
		PrintFields(static_cast<TypeOrExpr*>(node));
		PrintFields(static_cast<PointerType*>(node));
		EndObject();
	}

	void TypeOrExprVisitor::Visit(FunctionType* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"FunctionType"), node);
		PrintFields(static_cast<TypeOrExpr*>(node));
		PrintFields(static_cast<FunctionType*>(node));
		EndObject();
	}

	void TypeOrExprVisitor::Visit(Name* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"Name"), node);
		PrintFields(static_cast<TypeOrExpr*>(node));
		PrintFields(static_cast<QualifiedName*>(node));
		PrintFields(static_cast<Name*>(node));
		EndObject();
	}

	void TypeOrExprVisitor::Visit(MemberName* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"MemberName"), node);
		PrintFields(static_cast<TypeOrExpr*>(node));
		PrintFields(static_cast<QualifiedName*>(node));
		PrintFields(static_cast<MemberName*>(node));
		EndObject();
	}

	TypeOrExprVisitor::TypeOrExprVisitor(vl::stream::StreamWriter& _writer)
		: vl::glr::JsonVisitorBase(_writer)
	{
	}

	void TypeOrExprVisitor::Print(TypeOrExpr* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		node->Accept(static_cast<TypeOrExpr::IVisitor*>(this));
	}

}
