/***********************************************************************
This file is generated by: Vczh Parser Generator
From parser definition:Ast
Licensed under https://github.com/vczh-libraries/License
***********************************************************************/

#include "CppAst_Json.h"

namespace cpp_parser::json_visitor
{
	void AstVisitor::PrintFields(CppAdvancedType* node)
	{
		BeginField(vl::WString::Unmanaged(L"argument"));
		Print(node->argument.Obj());
		EndField();
		BeginField(vl::WString::Unmanaged(L"kind"));
		switch (node->kind)
		{
		case cpp_parser::CppAdvancedTypeKinds::AlignAs:
			WriteString(vl::WString::Unmanaged(L"AlignAs"));
			break;
		case cpp_parser::CppAdvancedTypeKinds::Const:
			WriteString(vl::WString::Unmanaged(L"Const"));
			break;
		case cpp_parser::CppAdvancedTypeKinds::LRef:
			WriteString(vl::WString::Unmanaged(L"LRef"));
			break;
		case cpp_parser::CppAdvancedTypeKinds::Member:
			WriteString(vl::WString::Unmanaged(L"Member"));
			break;
		case cpp_parser::CppAdvancedTypeKinds::Pointer:
			WriteString(vl::WString::Unmanaged(L"Pointer"));
			break;
		case cpp_parser::CppAdvancedTypeKinds::Pointer32:
			WriteString(vl::WString::Unmanaged(L"Pointer32"));
			break;
		case cpp_parser::CppAdvancedTypeKinds::Pointer64:
			WriteString(vl::WString::Unmanaged(L"Pointer64"));
			break;
		case cpp_parser::CppAdvancedTypeKinds::RRef:
			WriteString(vl::WString::Unmanaged(L"RRef"));
			break;
		case cpp_parser::CppAdvancedTypeKinds::Volatile:
			WriteString(vl::WString::Unmanaged(L"Volatile"));
			break;
		default:
			WriteNull();
		}
		EndField();
	}
	void AstVisitor::PrintFields(CppBinaryExpr* node)
	{
		BeginField(vl::WString::Unmanaged(L"left"));
		Print(node->left.Obj());
		EndField();
		BeginField(vl::WString::Unmanaged(L"op"));
		switch (node->op)
		{
		case cpp_parser::CppOperators::And:
			WriteString(vl::WString::Unmanaged(L"And"));
			break;
		case cpp_parser::CppOperators::AndAssign:
			WriteString(vl::WString::Unmanaged(L"AndAssign"));
			break;
		case cpp_parser::CppOperators::Assign:
			WriteString(vl::WString::Unmanaged(L"Assign"));
			break;
		case cpp_parser::CppOperators::BitwiseAnd:
			WriteString(vl::WString::Unmanaged(L"BitwiseAnd"));
			break;
		case cpp_parser::CppOperators::BitwiseOr:
			WriteString(vl::WString::Unmanaged(L"BitwiseOr"));
			break;
		case cpp_parser::CppOperators::Bracket:
			WriteString(vl::WString::Unmanaged(L"Bracket"));
			break;
		case cpp_parser::CppOperators::Comma:
			WriteString(vl::WString::Unmanaged(L"Comma"));
			break;
		case cpp_parser::CppOperators::Compare:
			WriteString(vl::WString::Unmanaged(L"Compare"));
			break;
		case cpp_parser::CppOperators::Decrease:
			WriteString(vl::WString::Unmanaged(L"Decrease"));
			break;
		case cpp_parser::CppOperators::Delete:
			WriteString(vl::WString::Unmanaged(L"Delete"));
			break;
		case cpp_parser::CppOperators::DeleteArray:
			WriteString(vl::WString::Unmanaged(L"DeleteArray"));
			break;
		case cpp_parser::CppOperators::Div:
			WriteString(vl::WString::Unmanaged(L"Div"));
			break;
		case cpp_parser::CppOperators::DivAssign:
			WriteString(vl::WString::Unmanaged(L"DivAssign"));
			break;
		case cpp_parser::CppOperators::EQ:
			WriteString(vl::WString::Unmanaged(L"EQ"));
			break;
		case cpp_parser::CppOperators::GE:
			WriteString(vl::WString::Unmanaged(L"GE"));
			break;
		case cpp_parser::CppOperators::GT:
			WriteString(vl::WString::Unmanaged(L"GT"));
			break;
		case cpp_parser::CppOperators::Increase:
			WriteString(vl::WString::Unmanaged(L"Increase"));
			break;
		case cpp_parser::CppOperators::LE:
			WriteString(vl::WString::Unmanaged(L"LE"));
			break;
		case cpp_parser::CppOperators::LT:
			WriteString(vl::WString::Unmanaged(L"LT"));
			break;
		case cpp_parser::CppOperators::LeftShift:
			WriteString(vl::WString::Unmanaged(L"LeftShift"));
			break;
		case cpp_parser::CppOperators::LeftShiftAssign:
			WriteString(vl::WString::Unmanaged(L"LeftShiftAssign"));
			break;
		case cpp_parser::CppOperators::Member:
			WriteString(vl::WString::Unmanaged(L"Member"));
			break;
		case cpp_parser::CppOperators::MemberDeref:
			WriteString(vl::WString::Unmanaged(L"MemberDeref"));
			break;
		case cpp_parser::CppOperators::Minus:
			WriteString(vl::WString::Unmanaged(L"Minus"));
			break;
		case cpp_parser::CppOperators::MinusAssign:
			WriteString(vl::WString::Unmanaged(L"MinusAssign"));
			break;
		case cpp_parser::CppOperators::Mod:
			WriteString(vl::WString::Unmanaged(L"Mod"));
			break;
		case cpp_parser::CppOperators::ModAssign:
			WriteString(vl::WString::Unmanaged(L"ModAssign"));
			break;
		case cpp_parser::CppOperators::Mul:
			WriteString(vl::WString::Unmanaged(L"Mul"));
			break;
		case cpp_parser::CppOperators::MulAssign:
			WriteString(vl::WString::Unmanaged(L"MulAssign"));
			break;
		case cpp_parser::CppOperators::NE:
			WriteString(vl::WString::Unmanaged(L"NE"));
			break;
		case cpp_parser::CppOperators::New:
			WriteString(vl::WString::Unmanaged(L"New"));
			break;
		case cpp_parser::CppOperators::NewArray:
			WriteString(vl::WString::Unmanaged(L"NewArray"));
			break;
		case cpp_parser::CppOperators::Not:
			WriteString(vl::WString::Unmanaged(L"Not"));
			break;
		case cpp_parser::CppOperators::Or:
			WriteString(vl::WString::Unmanaged(L"Or"));
			break;
		case cpp_parser::CppOperators::OrAssign:
			WriteString(vl::WString::Unmanaged(L"OrAssign"));
			break;
		case cpp_parser::CppOperators::Parantheses:
			WriteString(vl::WString::Unmanaged(L"Parantheses"));
			break;
		case cpp_parser::CppOperators::Plus:
			WriteString(vl::WString::Unmanaged(L"Plus"));
			break;
		case cpp_parser::CppOperators::PlusAssign:
			WriteString(vl::WString::Unmanaged(L"PlusAssign"));
			break;
		case cpp_parser::CppOperators::Pointer:
			WriteString(vl::WString::Unmanaged(L"Pointer"));
			break;
		case cpp_parser::CppOperators::PointerDeref:
			WriteString(vl::WString::Unmanaged(L"PointerDeref"));
			break;
		case cpp_parser::CppOperators::Revert:
			WriteString(vl::WString::Unmanaged(L"Revert"));
			break;
		case cpp_parser::CppOperators::RevertAssign:
			WriteString(vl::WString::Unmanaged(L"RevertAssign"));
			break;
		case cpp_parser::CppOperators::RightShift:
			WriteString(vl::WString::Unmanaged(L"RightShift"));
			break;
		case cpp_parser::CppOperators::RightShiftAssign:
			WriteString(vl::WString::Unmanaged(L"RightShiftAssign"));
			break;
		case cpp_parser::CppOperators::RoundBracket:
			WriteString(vl::WString::Unmanaged(L"RoundBracket"));
			break;
		case cpp_parser::CppOperators::Xor:
			WriteString(vl::WString::Unmanaged(L"Xor"));
			break;
		case cpp_parser::CppOperators::XorAssign:
			WriteString(vl::WString::Unmanaged(L"XorAssign"));
			break;
		default:
			WriteNull();
		}
		EndField();
		BeginField(vl::WString::Unmanaged(L"right"));
		Print(node->right.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(CppBlockStat* node)
	{
		BeginField(vl::WString::Unmanaged(L"statements"));
		BeginArray();
		for (auto&& listItem : node->statements)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
	}
	void AstVisitor::PrintFields(CppBraceExpr* node)
	{
		BeginField(vl::WString::Unmanaged(L"arguments"));
		BeginArray();
		for (auto&& listItem : node->arguments)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
	}
	void AstVisitor::PrintFields(CppBreakStat* node)
	{
	}
	void AstVisitor::PrintFields(CppCallExpr* node)
	{
		BeginField(vl::WString::Unmanaged(L"arguments"));
		BeginArray();
		for (auto&& listItem : node->arguments)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
		BeginField(vl::WString::Unmanaged(L"kind"));
		switch (node->kind)
		{
		case cpp_parser::CppCallKinds::Brace:
			WriteString(vl::WString::Unmanaged(L"Brace"));
			break;
		case cpp_parser::CppCallKinds::Parenthesis:
			WriteString(vl::WString::Unmanaged(L"Parenthesis"));
			break;
		default:
			WriteNull();
		}
		EndField();
		BeginField(vl::WString::Unmanaged(L"operand"));
		Print(node->operand.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(CppCaseStat* node)
	{
		BeginField(vl::WString::Unmanaged(L"expr"));
		Print(node->expr.Obj());
		EndField();
		BeginField(vl::WString::Unmanaged(L"stat"));
		Print(node->stat.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(CppCastExpr* node)
	{
		BeginField(vl::WString::Unmanaged(L"expr"));
		Print(node->expr.Obj());
		EndField();
		BeginField(vl::WString::Unmanaged(L"keyword"));
		WriteToken(node->keyword);
		EndField();
		BeginField(vl::WString::Unmanaged(L"type"));
		Print(node->type.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(CppClassBody* node)
	{
		BeginField(vl::WString::Unmanaged(L"firstVarPart"));
		Print(node->firstVarPart.Obj());
		EndField();
		BeginField(vl::WString::Unmanaged(L"inheritances"));
		BeginArray();
		for (auto&& listItem : node->inheritances)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
		BeginField(vl::WString::Unmanaged(L"memberParts"));
		BeginArray();
		for (auto&& listItem : node->memberParts)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
	}
	void AstVisitor::PrintFields(CppClassDeclaration* node)
	{
		BeginField(vl::WString::Unmanaged(L"arguments"));
		Print(node->arguments.Obj());
		EndField();
		BeginField(vl::WString::Unmanaged(L"body"));
		Print(node->body.Obj());
		EndField();
		BeginField(vl::WString::Unmanaged(L"kind"));
		switch (node->kind)
		{
		case cpp_parser::CppClassKind::Class:
			WriteString(vl::WString::Unmanaged(L"Class"));
			break;
		case cpp_parser::CppClassKind::Struct:
			WriteString(vl::WString::Unmanaged(L"Struct"));
			break;
		case cpp_parser::CppClassKind::Union:
			WriteString(vl::WString::Unmanaged(L"Union"));
			break;
		default:
			WriteNull();
		}
		EndField();
		BeginField(vl::WString::Unmanaged(L"name"));
		WriteToken(node->name);
		EndField();
	}
	void AstVisitor::PrintFields(CppClassInheritance* node)
	{
		BeginField(vl::WString::Unmanaged(L"accessor"));
		switch (node->accessor)
		{
		case cpp_parser::CppClassAccessor::Default:
			WriteString(vl::WString::Unmanaged(L"Default"));
			break;
		case cpp_parser::CppClassAccessor::Private:
			WriteString(vl::WString::Unmanaged(L"Private"));
			break;
		case cpp_parser::CppClassAccessor::Protected:
			WriteString(vl::WString::Unmanaged(L"Protected"));
			break;
		case cpp_parser::CppClassAccessor::Public:
			WriteString(vl::WString::Unmanaged(L"Public"));
			break;
		default:
			WriteNull();
		}
		EndField();
		BeginField(vl::WString::Unmanaged(L"type"));
		Print(node->type.Obj());
		EndField();
		BeginField(vl::WString::Unmanaged(L"variadic"));
		WriteToken(node->variadic);
		EndField();
	}
	void AstVisitor::PrintFields(CppClassMemberPart* node)
	{
		BeginField(vl::WString::Unmanaged(L"accessor"));
		switch (node->accessor)
		{
		case cpp_parser::CppClassAccessor::Default:
			WriteString(vl::WString::Unmanaged(L"Default"));
			break;
		case cpp_parser::CppClassAccessor::Private:
			WriteString(vl::WString::Unmanaged(L"Private"));
			break;
		case cpp_parser::CppClassAccessor::Protected:
			WriteString(vl::WString::Unmanaged(L"Protected"));
			break;
		case cpp_parser::CppClassAccessor::Public:
			WriteString(vl::WString::Unmanaged(L"Public"));
			break;
		default:
			WriteNull();
		}
		EndField();
		BeginField(vl::WString::Unmanaged(L"decls"));
		BeginArray();
		for (auto&& listItem : node->decls)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
	}
	void AstVisitor::PrintFields(CppConstType* node)
	{
		BeginField(vl::WString::Unmanaged(L"type"));
		Print(node->type.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(CppContinueStat* node)
	{
	}
	void AstVisitor::PrintFields(CppDeclStat* node)
	{
		BeginField(vl::WString::Unmanaged(L"decl"));
		Print(node->decl.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(CppDeclaration* node)
	{
	}
	void AstVisitor::PrintFields(CppDeclarationCommon* node)
	{
		BeginField(vl::WString::Unmanaged(L"keywords"));
		BeginArray();
		for (auto&& listItem : node->keywords)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
	}
	void AstVisitor::PrintFields(CppDeclarationToResolve* node)
	{
		BeginField(vl::WString::Unmanaged(L"candidates"));
		BeginArray();
		for (auto&& listItem : node->candidates)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
	}
	void AstVisitor::PrintFields(CppDeclarator* node)
	{
		BeginField(vl::WString::Unmanaged(L"advancedTypes"));
		BeginArray();
		for (auto&& listItem : node->advancedTypes)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
		BeginField(vl::WString::Unmanaged(L"arguments"));
		Print(node->arguments.Obj());
		EndField();
		BeginField(vl::WString::Unmanaged(L"arrayParts"));
		BeginArray();
		for (auto&& listItem : node->arrayParts)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
		BeginField(vl::WString::Unmanaged(L"bitfield"));
		Print(node->bitfield.Obj());
		EndField();
		BeginField(vl::WString::Unmanaged(L"funcPart"));
		Print(node->funcPart.Obj());
		EndField();
		BeginField(vl::WString::Unmanaged(L"id"));
		Print(node->id.Obj());
		EndField();
		BeginField(vl::WString::Unmanaged(L"innerDeclarator"));
		Print(node->innerDeclarator.Obj());
		EndField();
		BeginField(vl::WString::Unmanaged(L"keywords"));
		BeginArray();
		for (auto&& listItem : node->keywords)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
		BeginField(vl::WString::Unmanaged(L"variadic"));
		WriteToken(node->variadic);
		EndField();
	}
	void AstVisitor::PrintFields(CppDeclaratorArrayPart* node)
	{
		BeginField(vl::WString::Unmanaged(L"argument"));
		Print(node->argument.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(CppDeclaratorFunctionPart* node)
	{
	}
	void AstVisitor::PrintFields(CppDeclaratorFunctionPartCommon* node)
	{
		BeginField(vl::WString::Unmanaged(L"deferredType"));
		Print(node->deferredType.Obj());
		EndField();
		BeginField(vl::WString::Unmanaged(L"keywords"));
		BeginArray();
		for (auto&& listItem : node->keywords)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
		BeginField(vl::WString::Unmanaged(L"parameters"));
		BeginArray();
		for (auto&& listItem : node->parameters)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
		BeginField(vl::WString::Unmanaged(L"variadic"));
		WriteToken(node->variadic);
		EndField();
	}
	void AstVisitor::PrintFields(CppDeclaratorFunctionPartToResolve* node)
	{
		BeginField(vl::WString::Unmanaged(L"candidates"));
		BeginArray();
		for (auto&& listItem : node->candidates)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
	}
	void AstVisitor::PrintFields(CppDeclaratorKeyword* node)
	{
		BeginField(vl::WString::Unmanaged(L"keyword"));
		WriteToken(node->keyword);
		EndField();
	}
	void AstVisitor::PrintFields(CppDeclaratorType* node)
	{
		BeginField(vl::WString::Unmanaged(L"declarator"));
		Print(node->declarator.Obj());
		EndField();
		BeginField(vl::WString::Unmanaged(L"keywords"));
		BeginArray();
		for (auto&& listItem : node->keywords)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
		BeginField(vl::WString::Unmanaged(L"type"));
		Print(node->type.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(CppDeclaratorVariablePart* node)
	{
	}
	void AstVisitor::PrintFields(CppDeclaratorVariablePartCommon* node)
	{
		BeginField(vl::WString::Unmanaged(L"declarator"));
		Print(node->declarator.Obj());
		EndField();
		BeginField(vl::WString::Unmanaged(L"init"));
		Print(node->init.Obj());
		EndField();
		BeginField(vl::WString::Unmanaged(L"nextVarPart"));
		Print(node->nextVarPart.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(CppDeclaratorVariablePartToResolve* node)
	{
		BeginField(vl::WString::Unmanaged(L"candidates"));
		BeginArray();
		for (auto&& listItem : node->candidates)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
	}
	void AstVisitor::PrintFields(CppDefaultStat* node)
	{
		BeginField(vl::WString::Unmanaged(L"stat"));
		Print(node->stat.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(CppDeleteExpr* node)
	{
		BeginField(vl::WString::Unmanaged(L"argument"));
		Print(node->argument.Obj());
		EndField();
		BeginField(vl::WString::Unmanaged(L"array"));
		switch (node->array)
		{
		case cpp_parser::CppOperatorArray::Array:
			WriteString(vl::WString::Unmanaged(L"Array"));
			break;
		case cpp_parser::CppOperatorArray::NotArray:
			WriteString(vl::WString::Unmanaged(L"NotArray"));
			break;
		default:
			WriteNull();
		}
		EndField();
		BeginField(vl::WString::Unmanaged(L"scope"));
		switch (node->scope)
		{
		case cpp_parser::CppOperatorScope::Context:
			WriteString(vl::WString::Unmanaged(L"Context"));
			break;
		case cpp_parser::CppOperatorScope::Root:
			WriteString(vl::WString::Unmanaged(L"Root"));
			break;
		default:
			WriteNull();
		}
		EndField();
	}
	void AstVisitor::PrintFields(CppDoWhileStat* node)
	{
		BeginField(vl::WString::Unmanaged(L"condition"));
		Print(node->condition.Obj());
		EndField();
		BeginField(vl::WString::Unmanaged(L"stat"));
		Print(node->stat.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(CppEmptyStat* node)
	{
	}
	void AstVisitor::PrintFields(CppEnumBody* node)
	{
		BeginField(vl::WString::Unmanaged(L"firstVarPart"));
		Print(node->firstVarPart.Obj());
		EndField();
		BeginField(vl::WString::Unmanaged(L"items"));
		BeginArray();
		for (auto&& listItem : node->items)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
	}
	void AstVisitor::PrintFields(CppEnumDeclaration* node)
	{
		BeginField(vl::WString::Unmanaged(L"body"));
		Print(node->body.Obj());
		EndField();
		BeginField(vl::WString::Unmanaged(L"kind"));
		switch (node->kind)
		{
		case cpp_parser::CppEnumKind::Enum:
			WriteString(vl::WString::Unmanaged(L"Enum"));
			break;
		case cpp_parser::CppEnumKind::EnumClass:
			WriteString(vl::WString::Unmanaged(L"EnumClass"));
			break;
		default:
			WriteNull();
		}
		EndField();
		BeginField(vl::WString::Unmanaged(L"name"));
		WriteToken(node->name);
		EndField();
		BeginField(vl::WString::Unmanaged(L"type"));
		Print(node->type.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(CppEnumItem* node)
	{
		BeginField(vl::WString::Unmanaged(L"expr"));
		Print(node->expr.Obj());
		EndField();
		BeginField(vl::WString::Unmanaged(L"name"));
		WriteToken(node->name);
		EndField();
	}
	void AstVisitor::PrintFields(CppExprOnly* node)
	{
	}
	void AstVisitor::PrintFields(CppExprStat* node)
	{
		BeginField(vl::WString::Unmanaged(L"expr"));
		Print(node->expr.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(CppExternDeclaration* node)
	{
		BeginField(vl::WString::Unmanaged(L"decls"));
		BeginArray();
		for (auto&& listItem : node->decls)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
	}
	void AstVisitor::PrintFields(CppFile* node)
	{
		BeginField(vl::WString::Unmanaged(L"decls"));
		BeginArray();
		for (auto&& listItem : node->decls)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
	}
	void AstVisitor::PrintFields(CppForStat* node)
	{
		BeginField(vl::WString::Unmanaged(L"conditionPart"));
		Print(node->conditionPart.Obj());
		EndField();
		BeginField(vl::WString::Unmanaged(L"stat"));
		Print(node->stat.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(CppForStatConditionPart* node)
	{
	}
	void AstVisitor::PrintFields(CppForStatIterateCondition* node)
	{
		BeginField(vl::WString::Unmanaged(L"collection"));
		Print(node->collection.Obj());
		EndField();
		BeginField(vl::WString::Unmanaged(L"decl"));
		Print(node->decl.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(CppForStatLoopCondition* node)
	{
		BeginField(vl::WString::Unmanaged(L"condition"));
		Print(node->condition.Obj());
		EndField();
		BeginField(vl::WString::Unmanaged(L"sideEffect"));
		Print(node->sideEffect.Obj());
		EndField();
		BeginField(vl::WString::Unmanaged(L"varsDecl"));
		Print(node->varsDecl.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(CppFriendTypeDeclaration* node)
	{
		BeginField(vl::WString::Unmanaged(L"type"));
		Print(node->type.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(CppFunctionKeyword* node)
	{
		BeginField(vl::WString::Unmanaged(L"arguments"));
		BeginArray();
		for (auto&& listItem : node->arguments)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
		BeginField(vl::WString::Unmanaged(L"keyword"));
		WriteToken(node->keyword);
		EndField();
	}
	void AstVisitor::PrintFields(CppGenericArgument* node)
	{
		BeginField(vl::WString::Unmanaged(L"argument"));
		Print(node->argument.Obj());
		EndField();
		BeginField(vl::WString::Unmanaged(L"variadic"));
		WriteToken(node->variadic);
		EndField();
	}
	void AstVisitor::PrintFields(CppGenericArguments* node)
	{
		BeginField(vl::WString::Unmanaged(L"arguments"));
		BeginArray();
		for (auto&& listItem : node->arguments)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
	}
	void AstVisitor::PrintFields(CppGenericHeader* node)
	{
		BeginField(vl::WString::Unmanaged(L"parameters"));
		BeginArray();
		for (auto&& listItem : node->parameters)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
	}
	void AstVisitor::PrintFields(CppGotoStat* node)
	{
		BeginField(vl::WString::Unmanaged(L"label"));
		WriteToken(node->label);
		EndField();
	}
	void AstVisitor::PrintFields(CppIdentifier* node)
	{
	}
	void AstVisitor::PrintFields(CppIfElseStat* node)
	{
		BeginField(vl::WString::Unmanaged(L"condition"));
		Print(node->condition.Obj());
		EndField();
		BeginField(vl::WString::Unmanaged(L"falseStat"));
		Print(node->falseStat.Obj());
		EndField();
		BeginField(vl::WString::Unmanaged(L"trueStat"));
		Print(node->trueStat.Obj());
		EndField();
		BeginField(vl::WString::Unmanaged(L"varsDecl"));
		Print(node->varsDecl.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(CppIfExpr* node)
	{
		BeginField(vl::WString::Unmanaged(L"condition"));
		Print(node->condition.Obj());
		EndField();
		BeginField(vl::WString::Unmanaged(L"falseBranch"));
		Print(node->falseBranch.Obj());
		EndField();
		BeginField(vl::WString::Unmanaged(L"trueBranch"));
		Print(node->trueBranch.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(CppIndexExpr* node)
	{
		BeginField(vl::WString::Unmanaged(L"index"));
		Print(node->index.Obj());
		EndField();
		BeginField(vl::WString::Unmanaged(L"operand"));
		Print(node->operand.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(CppLabelStat* node)
	{
		BeginField(vl::WString::Unmanaged(L"label"));
		WriteToken(node->label);
		EndField();
		BeginField(vl::WString::Unmanaged(L"stat"));
		Print(node->stat.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(CppLambdaCapture* node)
	{
		BeginField(vl::WString::Unmanaged(L"id"));
		Print(node->id.Obj());
		EndField();
		BeginField(vl::WString::Unmanaged(L"init"));
		Print(node->init.Obj());
		EndField();
		BeginField(vl::WString::Unmanaged(L"objKind"));
		switch (node->objKind)
		{
		case cpp_parser::CppLambdaCaptureObjectKinds::Default:
			WriteString(vl::WString::Unmanaged(L"Default"));
			break;
		case cpp_parser::CppLambdaCaptureObjectKinds::Id:
			WriteString(vl::WString::Unmanaged(L"Id"));
			break;
		case cpp_parser::CppLambdaCaptureObjectKinds::PackId:
			WriteString(vl::WString::Unmanaged(L"PackId"));
			break;
		case cpp_parser::CppLambdaCaptureObjectKinds::PackInit:
			WriteString(vl::WString::Unmanaged(L"PackInit"));
			break;
		case cpp_parser::CppLambdaCaptureObjectKinds::This:
			WriteString(vl::WString::Unmanaged(L"This"));
			break;
		default:
			WriteNull();
		}
		EndField();
		BeginField(vl::WString::Unmanaged(L"refKind"));
		switch (node->refKind)
		{
		case cpp_parser::CppLambdaCaptureRefeferenceKinds::Copy:
			WriteString(vl::WString::Unmanaged(L"Copy"));
			break;
		case cpp_parser::CppLambdaCaptureRefeferenceKinds::Ref:
			WriteString(vl::WString::Unmanaged(L"Ref"));
			break;
		default:
			WriteNull();
		}
		EndField();
	}
	void AstVisitor::PrintFields(CppLambdaExpr* node)
	{
		BeginField(vl::WString::Unmanaged(L"captures"));
		BeginArray();
		for (auto&& listItem : node->captures)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
		BeginField(vl::WString::Unmanaged(L"functionHeader"));
		Print(node->functionHeader.Obj());
		EndField();
		BeginField(vl::WString::Unmanaged(L"genericHeader"));
		Print(node->genericHeader.Obj());
		EndField();
		BeginField(vl::WString::Unmanaged(L"stat"));
		Print(node->stat.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(CppNameIdentifier* node)
	{
		BeginField(vl::WString::Unmanaged(L"kind"));
		switch (node->kind)
		{
		case cpp_parser::CppNameKinds::Class:
			WriteString(vl::WString::Unmanaged(L"Class"));
			break;
		case cpp_parser::CppNameKinds::Dtor:
			WriteString(vl::WString::Unmanaged(L"Dtor"));
			break;
		case cpp_parser::CppNameKinds::Enum:
			WriteString(vl::WString::Unmanaged(L"Enum"));
			break;
		case cpp_parser::CppNameKinds::EnumClass:
			WriteString(vl::WString::Unmanaged(L"EnumClass"));
			break;
		case cpp_parser::CppNameKinds::Normal:
			WriteString(vl::WString::Unmanaged(L"Normal"));
			break;
		case cpp_parser::CppNameKinds::Struct:
			WriteString(vl::WString::Unmanaged(L"Struct"));
			break;
		case cpp_parser::CppNameKinds::Union:
			WriteString(vl::WString::Unmanaged(L"Union"));
			break;
		case cpp_parser::CppNameKinds::UserDefinedLiteral:
			WriteString(vl::WString::Unmanaged(L"UserDefinedLiteral"));
			break;
		default:
			WriteNull();
		}
		EndField();
		BeginField(vl::WString::Unmanaged(L"name"));
		WriteToken(node->name);
		EndField();
	}
	void AstVisitor::PrintFields(CppNamespaceDeclaration* node)
	{
		BeginField(vl::WString::Unmanaged(L"decls"));
		BeginArray();
		for (auto&& listItem : node->decls)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
		BeginField(vl::WString::Unmanaged(L"names"));
		BeginArray();
		for (auto&& listItem : node->names)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
	}
	void AstVisitor::PrintFields(CppNamespaceName* node)
	{
		BeginField(vl::WString::Unmanaged(L"name"));
		WriteToken(node->name);
		EndField();
	}
	void AstVisitor::PrintFields(CppNewExpr* node)
	{
		BeginField(vl::WString::Unmanaged(L"arrayArguments"));
		BeginArray();
		for (auto&& listItem : node->arrayArguments)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
		BeginField(vl::WString::Unmanaged(L"init"));
		Print(node->init.Obj());
		EndField();
		BeginField(vl::WString::Unmanaged(L"placementArguments"));
		BeginArray();
		for (auto&& listItem : node->placementArguments)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
		BeginField(vl::WString::Unmanaged(L"scope"));
		switch (node->scope)
		{
		case cpp_parser::CppOperatorScope::Context:
			WriteString(vl::WString::Unmanaged(L"Context"));
			break;
		case cpp_parser::CppOperatorScope::Root:
			WriteString(vl::WString::Unmanaged(L"Root"));
			break;
		default:
			WriteNull();
		}
		EndField();
		BeginField(vl::WString::Unmanaged(L"type"));
		BeginArray();
		for (auto&& listItem : node->type)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
	}
	void AstVisitor::PrintFields(CppNumericExprLiteral* node)
	{
		BeginField(vl::WString::Unmanaged(L"kind"));
		switch (node->kind)
		{
		case cpp_parser::CppNumericExprLiteralKinds::Binary:
			WriteString(vl::WString::Unmanaged(L"Binary"));
			break;
		case cpp_parser::CppNumericExprLiteralKinds::Char:
			WriteString(vl::WString::Unmanaged(L"Char"));
			break;
		case cpp_parser::CppNumericExprLiteralKinds::Float:
			WriteString(vl::WString::Unmanaged(L"Float"));
			break;
		case cpp_parser::CppNumericExprLiteralKinds::FloatHex:
			WriteString(vl::WString::Unmanaged(L"FloatHex"));
			break;
		case cpp_parser::CppNumericExprLiteralKinds::Hex:
			WriteString(vl::WString::Unmanaged(L"Hex"));
			break;
		case cpp_parser::CppNumericExprLiteralKinds::Integer:
			WriteString(vl::WString::Unmanaged(L"Integer"));
			break;
		default:
			WriteNull();
		}
		EndField();
		BeginField(vl::WString::Unmanaged(L"literal"));
		WriteToken(node->literal);
		EndField();
	}
	void AstVisitor::PrintFields(CppOperatorIdentifier* node)
	{
		BeginField(vl::WString::Unmanaged(L"op"));
		switch (node->op)
		{
		case cpp_parser::CppOperators::And:
			WriteString(vl::WString::Unmanaged(L"And"));
			break;
		case cpp_parser::CppOperators::AndAssign:
			WriteString(vl::WString::Unmanaged(L"AndAssign"));
			break;
		case cpp_parser::CppOperators::Assign:
			WriteString(vl::WString::Unmanaged(L"Assign"));
			break;
		case cpp_parser::CppOperators::BitwiseAnd:
			WriteString(vl::WString::Unmanaged(L"BitwiseAnd"));
			break;
		case cpp_parser::CppOperators::BitwiseOr:
			WriteString(vl::WString::Unmanaged(L"BitwiseOr"));
			break;
		case cpp_parser::CppOperators::Bracket:
			WriteString(vl::WString::Unmanaged(L"Bracket"));
			break;
		case cpp_parser::CppOperators::Comma:
			WriteString(vl::WString::Unmanaged(L"Comma"));
			break;
		case cpp_parser::CppOperators::Compare:
			WriteString(vl::WString::Unmanaged(L"Compare"));
			break;
		case cpp_parser::CppOperators::Decrease:
			WriteString(vl::WString::Unmanaged(L"Decrease"));
			break;
		case cpp_parser::CppOperators::Delete:
			WriteString(vl::WString::Unmanaged(L"Delete"));
			break;
		case cpp_parser::CppOperators::DeleteArray:
			WriteString(vl::WString::Unmanaged(L"DeleteArray"));
			break;
		case cpp_parser::CppOperators::Div:
			WriteString(vl::WString::Unmanaged(L"Div"));
			break;
		case cpp_parser::CppOperators::DivAssign:
			WriteString(vl::WString::Unmanaged(L"DivAssign"));
			break;
		case cpp_parser::CppOperators::EQ:
			WriteString(vl::WString::Unmanaged(L"EQ"));
			break;
		case cpp_parser::CppOperators::GE:
			WriteString(vl::WString::Unmanaged(L"GE"));
			break;
		case cpp_parser::CppOperators::GT:
			WriteString(vl::WString::Unmanaged(L"GT"));
			break;
		case cpp_parser::CppOperators::Increase:
			WriteString(vl::WString::Unmanaged(L"Increase"));
			break;
		case cpp_parser::CppOperators::LE:
			WriteString(vl::WString::Unmanaged(L"LE"));
			break;
		case cpp_parser::CppOperators::LT:
			WriteString(vl::WString::Unmanaged(L"LT"));
			break;
		case cpp_parser::CppOperators::LeftShift:
			WriteString(vl::WString::Unmanaged(L"LeftShift"));
			break;
		case cpp_parser::CppOperators::LeftShiftAssign:
			WriteString(vl::WString::Unmanaged(L"LeftShiftAssign"));
			break;
		case cpp_parser::CppOperators::Member:
			WriteString(vl::WString::Unmanaged(L"Member"));
			break;
		case cpp_parser::CppOperators::MemberDeref:
			WriteString(vl::WString::Unmanaged(L"MemberDeref"));
			break;
		case cpp_parser::CppOperators::Minus:
			WriteString(vl::WString::Unmanaged(L"Minus"));
			break;
		case cpp_parser::CppOperators::MinusAssign:
			WriteString(vl::WString::Unmanaged(L"MinusAssign"));
			break;
		case cpp_parser::CppOperators::Mod:
			WriteString(vl::WString::Unmanaged(L"Mod"));
			break;
		case cpp_parser::CppOperators::ModAssign:
			WriteString(vl::WString::Unmanaged(L"ModAssign"));
			break;
		case cpp_parser::CppOperators::Mul:
			WriteString(vl::WString::Unmanaged(L"Mul"));
			break;
		case cpp_parser::CppOperators::MulAssign:
			WriteString(vl::WString::Unmanaged(L"MulAssign"));
			break;
		case cpp_parser::CppOperators::NE:
			WriteString(vl::WString::Unmanaged(L"NE"));
			break;
		case cpp_parser::CppOperators::New:
			WriteString(vl::WString::Unmanaged(L"New"));
			break;
		case cpp_parser::CppOperators::NewArray:
			WriteString(vl::WString::Unmanaged(L"NewArray"));
			break;
		case cpp_parser::CppOperators::Not:
			WriteString(vl::WString::Unmanaged(L"Not"));
			break;
		case cpp_parser::CppOperators::Or:
			WriteString(vl::WString::Unmanaged(L"Or"));
			break;
		case cpp_parser::CppOperators::OrAssign:
			WriteString(vl::WString::Unmanaged(L"OrAssign"));
			break;
		case cpp_parser::CppOperators::Parantheses:
			WriteString(vl::WString::Unmanaged(L"Parantheses"));
			break;
		case cpp_parser::CppOperators::Plus:
			WriteString(vl::WString::Unmanaged(L"Plus"));
			break;
		case cpp_parser::CppOperators::PlusAssign:
			WriteString(vl::WString::Unmanaged(L"PlusAssign"));
			break;
		case cpp_parser::CppOperators::Pointer:
			WriteString(vl::WString::Unmanaged(L"Pointer"));
			break;
		case cpp_parser::CppOperators::PointerDeref:
			WriteString(vl::WString::Unmanaged(L"PointerDeref"));
			break;
		case cpp_parser::CppOperators::Revert:
			WriteString(vl::WString::Unmanaged(L"Revert"));
			break;
		case cpp_parser::CppOperators::RevertAssign:
			WriteString(vl::WString::Unmanaged(L"RevertAssign"));
			break;
		case cpp_parser::CppOperators::RightShift:
			WriteString(vl::WString::Unmanaged(L"RightShift"));
			break;
		case cpp_parser::CppOperators::RightShiftAssign:
			WriteString(vl::WString::Unmanaged(L"RightShiftAssign"));
			break;
		case cpp_parser::CppOperators::RoundBracket:
			WriteString(vl::WString::Unmanaged(L"RoundBracket"));
			break;
		case cpp_parser::CppOperators::Xor:
			WriteString(vl::WString::Unmanaged(L"Xor"));
			break;
		case cpp_parser::CppOperators::XorAssign:
			WriteString(vl::WString::Unmanaged(L"XorAssign"));
			break;
		default:
			WriteNull();
		}
		EndField();
	}
	void AstVisitor::PrintFields(CppOperatorTypeIdentifier* node)
	{
		BeginField(vl::WString::Unmanaged(L"type"));
		Print(node->type.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(CppOrdinaryGenericParameter* node)
	{
		BeginField(vl::WString::Unmanaged(L"genericHeader"));
		Print(node->genericHeader.Obj());
		EndField();
		BeginField(vl::WString::Unmanaged(L"id"));
		Print(node->id.Obj());
		EndField();
		BeginField(vl::WString::Unmanaged(L"init"));
		Print(node->init.Obj());
		EndField();
		BeginField(vl::WString::Unmanaged(L"typenameToken"));
		WriteToken(node->typenameToken);
		EndField();
		BeginField(vl::WString::Unmanaged(L"variadic"));
		WriteToken(node->variadic);
		EndField();
	}
	void AstVisitor::PrintFields(CppParenthesisExpr* node)
	{
		BeginField(vl::WString::Unmanaged(L"expr"));
		Print(node->expr.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(CppPostfixUnaryExpr* node)
	{
		BeginField(vl::WString::Unmanaged(L"op"));
		switch (node->op)
		{
		case cpp_parser::CppOperators::And:
			WriteString(vl::WString::Unmanaged(L"And"));
			break;
		case cpp_parser::CppOperators::AndAssign:
			WriteString(vl::WString::Unmanaged(L"AndAssign"));
			break;
		case cpp_parser::CppOperators::Assign:
			WriteString(vl::WString::Unmanaged(L"Assign"));
			break;
		case cpp_parser::CppOperators::BitwiseAnd:
			WriteString(vl::WString::Unmanaged(L"BitwiseAnd"));
			break;
		case cpp_parser::CppOperators::BitwiseOr:
			WriteString(vl::WString::Unmanaged(L"BitwiseOr"));
			break;
		case cpp_parser::CppOperators::Bracket:
			WriteString(vl::WString::Unmanaged(L"Bracket"));
			break;
		case cpp_parser::CppOperators::Comma:
			WriteString(vl::WString::Unmanaged(L"Comma"));
			break;
		case cpp_parser::CppOperators::Compare:
			WriteString(vl::WString::Unmanaged(L"Compare"));
			break;
		case cpp_parser::CppOperators::Decrease:
			WriteString(vl::WString::Unmanaged(L"Decrease"));
			break;
		case cpp_parser::CppOperators::Delete:
			WriteString(vl::WString::Unmanaged(L"Delete"));
			break;
		case cpp_parser::CppOperators::DeleteArray:
			WriteString(vl::WString::Unmanaged(L"DeleteArray"));
			break;
		case cpp_parser::CppOperators::Div:
			WriteString(vl::WString::Unmanaged(L"Div"));
			break;
		case cpp_parser::CppOperators::DivAssign:
			WriteString(vl::WString::Unmanaged(L"DivAssign"));
			break;
		case cpp_parser::CppOperators::EQ:
			WriteString(vl::WString::Unmanaged(L"EQ"));
			break;
		case cpp_parser::CppOperators::GE:
			WriteString(vl::WString::Unmanaged(L"GE"));
			break;
		case cpp_parser::CppOperators::GT:
			WriteString(vl::WString::Unmanaged(L"GT"));
			break;
		case cpp_parser::CppOperators::Increase:
			WriteString(vl::WString::Unmanaged(L"Increase"));
			break;
		case cpp_parser::CppOperators::LE:
			WriteString(vl::WString::Unmanaged(L"LE"));
			break;
		case cpp_parser::CppOperators::LT:
			WriteString(vl::WString::Unmanaged(L"LT"));
			break;
		case cpp_parser::CppOperators::LeftShift:
			WriteString(vl::WString::Unmanaged(L"LeftShift"));
			break;
		case cpp_parser::CppOperators::LeftShiftAssign:
			WriteString(vl::WString::Unmanaged(L"LeftShiftAssign"));
			break;
		case cpp_parser::CppOperators::Member:
			WriteString(vl::WString::Unmanaged(L"Member"));
			break;
		case cpp_parser::CppOperators::MemberDeref:
			WriteString(vl::WString::Unmanaged(L"MemberDeref"));
			break;
		case cpp_parser::CppOperators::Minus:
			WriteString(vl::WString::Unmanaged(L"Minus"));
			break;
		case cpp_parser::CppOperators::MinusAssign:
			WriteString(vl::WString::Unmanaged(L"MinusAssign"));
			break;
		case cpp_parser::CppOperators::Mod:
			WriteString(vl::WString::Unmanaged(L"Mod"));
			break;
		case cpp_parser::CppOperators::ModAssign:
			WriteString(vl::WString::Unmanaged(L"ModAssign"));
			break;
		case cpp_parser::CppOperators::Mul:
			WriteString(vl::WString::Unmanaged(L"Mul"));
			break;
		case cpp_parser::CppOperators::MulAssign:
			WriteString(vl::WString::Unmanaged(L"MulAssign"));
			break;
		case cpp_parser::CppOperators::NE:
			WriteString(vl::WString::Unmanaged(L"NE"));
			break;
		case cpp_parser::CppOperators::New:
			WriteString(vl::WString::Unmanaged(L"New"));
			break;
		case cpp_parser::CppOperators::NewArray:
			WriteString(vl::WString::Unmanaged(L"NewArray"));
			break;
		case cpp_parser::CppOperators::Not:
			WriteString(vl::WString::Unmanaged(L"Not"));
			break;
		case cpp_parser::CppOperators::Or:
			WriteString(vl::WString::Unmanaged(L"Or"));
			break;
		case cpp_parser::CppOperators::OrAssign:
			WriteString(vl::WString::Unmanaged(L"OrAssign"));
			break;
		case cpp_parser::CppOperators::Parantheses:
			WriteString(vl::WString::Unmanaged(L"Parantheses"));
			break;
		case cpp_parser::CppOperators::Plus:
			WriteString(vl::WString::Unmanaged(L"Plus"));
			break;
		case cpp_parser::CppOperators::PlusAssign:
			WriteString(vl::WString::Unmanaged(L"PlusAssign"));
			break;
		case cpp_parser::CppOperators::Pointer:
			WriteString(vl::WString::Unmanaged(L"Pointer"));
			break;
		case cpp_parser::CppOperators::PointerDeref:
			WriteString(vl::WString::Unmanaged(L"PointerDeref"));
			break;
		case cpp_parser::CppOperators::Revert:
			WriteString(vl::WString::Unmanaged(L"Revert"));
			break;
		case cpp_parser::CppOperators::RevertAssign:
			WriteString(vl::WString::Unmanaged(L"RevertAssign"));
			break;
		case cpp_parser::CppOperators::RightShift:
			WriteString(vl::WString::Unmanaged(L"RightShift"));
			break;
		case cpp_parser::CppOperators::RightShiftAssign:
			WriteString(vl::WString::Unmanaged(L"RightShiftAssign"));
			break;
		case cpp_parser::CppOperators::RoundBracket:
			WriteString(vl::WString::Unmanaged(L"RoundBracket"));
			break;
		case cpp_parser::CppOperators::Xor:
			WriteString(vl::WString::Unmanaged(L"Xor"));
			break;
		case cpp_parser::CppOperators::XorAssign:
			WriteString(vl::WString::Unmanaged(L"XorAssign"));
			break;
		default:
			WriteNull();
		}
		EndField();
		BeginField(vl::WString::Unmanaged(L"operand"));
		Print(node->operand.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(CppPrefixUnaryExpr* node)
	{
		BeginField(vl::WString::Unmanaged(L"op"));
		switch (node->op)
		{
		case cpp_parser::CppOperators::And:
			WriteString(vl::WString::Unmanaged(L"And"));
			break;
		case cpp_parser::CppOperators::AndAssign:
			WriteString(vl::WString::Unmanaged(L"AndAssign"));
			break;
		case cpp_parser::CppOperators::Assign:
			WriteString(vl::WString::Unmanaged(L"Assign"));
			break;
		case cpp_parser::CppOperators::BitwiseAnd:
			WriteString(vl::WString::Unmanaged(L"BitwiseAnd"));
			break;
		case cpp_parser::CppOperators::BitwiseOr:
			WriteString(vl::WString::Unmanaged(L"BitwiseOr"));
			break;
		case cpp_parser::CppOperators::Bracket:
			WriteString(vl::WString::Unmanaged(L"Bracket"));
			break;
		case cpp_parser::CppOperators::Comma:
			WriteString(vl::WString::Unmanaged(L"Comma"));
			break;
		case cpp_parser::CppOperators::Compare:
			WriteString(vl::WString::Unmanaged(L"Compare"));
			break;
		case cpp_parser::CppOperators::Decrease:
			WriteString(vl::WString::Unmanaged(L"Decrease"));
			break;
		case cpp_parser::CppOperators::Delete:
			WriteString(vl::WString::Unmanaged(L"Delete"));
			break;
		case cpp_parser::CppOperators::DeleteArray:
			WriteString(vl::WString::Unmanaged(L"DeleteArray"));
			break;
		case cpp_parser::CppOperators::Div:
			WriteString(vl::WString::Unmanaged(L"Div"));
			break;
		case cpp_parser::CppOperators::DivAssign:
			WriteString(vl::WString::Unmanaged(L"DivAssign"));
			break;
		case cpp_parser::CppOperators::EQ:
			WriteString(vl::WString::Unmanaged(L"EQ"));
			break;
		case cpp_parser::CppOperators::GE:
			WriteString(vl::WString::Unmanaged(L"GE"));
			break;
		case cpp_parser::CppOperators::GT:
			WriteString(vl::WString::Unmanaged(L"GT"));
			break;
		case cpp_parser::CppOperators::Increase:
			WriteString(vl::WString::Unmanaged(L"Increase"));
			break;
		case cpp_parser::CppOperators::LE:
			WriteString(vl::WString::Unmanaged(L"LE"));
			break;
		case cpp_parser::CppOperators::LT:
			WriteString(vl::WString::Unmanaged(L"LT"));
			break;
		case cpp_parser::CppOperators::LeftShift:
			WriteString(vl::WString::Unmanaged(L"LeftShift"));
			break;
		case cpp_parser::CppOperators::LeftShiftAssign:
			WriteString(vl::WString::Unmanaged(L"LeftShiftAssign"));
			break;
		case cpp_parser::CppOperators::Member:
			WriteString(vl::WString::Unmanaged(L"Member"));
			break;
		case cpp_parser::CppOperators::MemberDeref:
			WriteString(vl::WString::Unmanaged(L"MemberDeref"));
			break;
		case cpp_parser::CppOperators::Minus:
			WriteString(vl::WString::Unmanaged(L"Minus"));
			break;
		case cpp_parser::CppOperators::MinusAssign:
			WriteString(vl::WString::Unmanaged(L"MinusAssign"));
			break;
		case cpp_parser::CppOperators::Mod:
			WriteString(vl::WString::Unmanaged(L"Mod"));
			break;
		case cpp_parser::CppOperators::ModAssign:
			WriteString(vl::WString::Unmanaged(L"ModAssign"));
			break;
		case cpp_parser::CppOperators::Mul:
			WriteString(vl::WString::Unmanaged(L"Mul"));
			break;
		case cpp_parser::CppOperators::MulAssign:
			WriteString(vl::WString::Unmanaged(L"MulAssign"));
			break;
		case cpp_parser::CppOperators::NE:
			WriteString(vl::WString::Unmanaged(L"NE"));
			break;
		case cpp_parser::CppOperators::New:
			WriteString(vl::WString::Unmanaged(L"New"));
			break;
		case cpp_parser::CppOperators::NewArray:
			WriteString(vl::WString::Unmanaged(L"NewArray"));
			break;
		case cpp_parser::CppOperators::Not:
			WriteString(vl::WString::Unmanaged(L"Not"));
			break;
		case cpp_parser::CppOperators::Or:
			WriteString(vl::WString::Unmanaged(L"Or"));
			break;
		case cpp_parser::CppOperators::OrAssign:
			WriteString(vl::WString::Unmanaged(L"OrAssign"));
			break;
		case cpp_parser::CppOperators::Parantheses:
			WriteString(vl::WString::Unmanaged(L"Parantheses"));
			break;
		case cpp_parser::CppOperators::Plus:
			WriteString(vl::WString::Unmanaged(L"Plus"));
			break;
		case cpp_parser::CppOperators::PlusAssign:
			WriteString(vl::WString::Unmanaged(L"PlusAssign"));
			break;
		case cpp_parser::CppOperators::Pointer:
			WriteString(vl::WString::Unmanaged(L"Pointer"));
			break;
		case cpp_parser::CppOperators::PointerDeref:
			WriteString(vl::WString::Unmanaged(L"PointerDeref"));
			break;
		case cpp_parser::CppOperators::Revert:
			WriteString(vl::WString::Unmanaged(L"Revert"));
			break;
		case cpp_parser::CppOperators::RevertAssign:
			WriteString(vl::WString::Unmanaged(L"RevertAssign"));
			break;
		case cpp_parser::CppOperators::RightShift:
			WriteString(vl::WString::Unmanaged(L"RightShift"));
			break;
		case cpp_parser::CppOperators::RightShiftAssign:
			WriteString(vl::WString::Unmanaged(L"RightShiftAssign"));
			break;
		case cpp_parser::CppOperators::RoundBracket:
			WriteString(vl::WString::Unmanaged(L"RoundBracket"));
			break;
		case cpp_parser::CppOperators::Xor:
			WriteString(vl::WString::Unmanaged(L"Xor"));
			break;
		case cpp_parser::CppOperators::XorAssign:
			WriteString(vl::WString::Unmanaged(L"XorAssign"));
			break;
		default:
			WriteNull();
		}
		EndField();
		BeginField(vl::WString::Unmanaged(L"operand"));
		Print(node->operand.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(CppPrimitiveExprLiteral* node)
	{
		BeginField(vl::WString::Unmanaged(L"kind"));
		switch (node->kind)
		{
		case cpp_parser::CppPrimitiveExprLiteralKinds::False:
			WriteString(vl::WString::Unmanaged(L"False"));
			break;
		case cpp_parser::CppPrimitiveExprLiteralKinds::Nullptr:
			WriteString(vl::WString::Unmanaged(L"Nullptr"));
			break;
		case cpp_parser::CppPrimitiveExprLiteralKinds::This:
			WriteString(vl::WString::Unmanaged(L"This"));
			break;
		case cpp_parser::CppPrimitiveExprLiteralKinds::True:
			WriteString(vl::WString::Unmanaged(L"True"));
			break;
		case cpp_parser::CppPrimitiveExprLiteralKinds::__Nullptr:
			WriteString(vl::WString::Unmanaged(L"__Nullptr"));
			break;
		default:
			WriteNull();
		}
		EndField();
	}
	void AstVisitor::PrintFields(CppPrimitiveType* node)
	{
		BeginField(vl::WString::Unmanaged(L"kind"));
		switch (node->kind)
		{
		case cpp_parser::CppPrimitiveTypeKinds::Neutral:
			WriteString(vl::WString::Unmanaged(L"Neutral"));
			break;
		case cpp_parser::CppPrimitiveTypeKinds::Signed:
			WriteString(vl::WString::Unmanaged(L"Signed"));
			break;
		case cpp_parser::CppPrimitiveTypeKinds::Unsigned:
			WriteString(vl::WString::Unmanaged(L"Unsigned"));
			break;
		default:
			WriteNull();
		}
		EndField();
		BeginField(vl::WString::Unmanaged(L"literal1"));
		WriteToken(node->literal1);
		EndField();
		BeginField(vl::WString::Unmanaged(L"literal2"));
		WriteToken(node->literal2);
		EndField();
	}
	void AstVisitor::PrintFields(CppQualifiedName* node)
	{
		BeginField(vl::WString::Unmanaged(L"arguments"));
		Print(node->arguments.Obj());
		EndField();
		BeginField(vl::WString::Unmanaged(L"expr"));
		Print(node->expr.Obj());
		EndField();
		BeginField(vl::WString::Unmanaged(L"id"));
		Print(node->id.Obj());
		EndField();
		BeginField(vl::WString::Unmanaged(L"kind"));
		switch (node->kind)
		{
		case cpp_parser::CppQualifiedNameKinds::Auto:
			WriteString(vl::WString::Unmanaged(L"Auto"));
			break;
		case cpp_parser::CppQualifiedNameKinds::Context:
			WriteString(vl::WString::Unmanaged(L"Context"));
			break;
		case cpp_parser::CppQualifiedNameKinds::Decltype:
			WriteString(vl::WString::Unmanaged(L"Decltype"));
			break;
		case cpp_parser::CppQualifiedNameKinds::Member:
			WriteString(vl::WString::Unmanaged(L"Member"));
			break;
		case cpp_parser::CppQualifiedNameKinds::Root:
			WriteString(vl::WString::Unmanaged(L"Root"));
			break;
		default:
			WriteNull();
		}
		EndField();
		BeginField(vl::WString::Unmanaged(L"parent"));
		Print(node->parent.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(CppReturnStat* node)
	{
		BeginField(vl::WString::Unmanaged(L"expr"));
		Print(node->expr.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(CppSizeofExpr* node)
	{
		BeginField(vl::WString::Unmanaged(L"argument"));
		Print(node->argument.Obj());
		EndField();
		BeginField(vl::WString::Unmanaged(L"variadic"));
		WriteToken(node->variadic);
		EndField();
	}
	void AstVisitor::PrintFields(CppStatement* node)
	{
	}
	void AstVisitor::PrintFields(CppStatementToResolve* node)
	{
		BeginField(vl::WString::Unmanaged(L"candidates"));
		BeginArray();
		for (auto&& listItem : node->candidates)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
	}
	void AstVisitor::PrintFields(CppStaticAssertDeclaration* node)
	{
		BeginField(vl::WString::Unmanaged(L"expr"));
		Print(node->expr.Obj());
		EndField();
		BeginField(vl::WString::Unmanaged(L"message"));
		Print(node->message.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(CppStringLiteral* node)
	{
		BeginField(vl::WString::Unmanaged(L"fragments"));
		BeginArray();
		for (auto&& listItem : node->fragments)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
	}
	void AstVisitor::PrintFields(CppStringLiteralFragment* node)
	{
		BeginField(vl::WString::Unmanaged(L"kind"));
		switch (node->kind)
		{
		case cpp_parser::CppStringLiteralKinds::Macro_LPREFIX:
			WriteString(vl::WString::Unmanaged(L"Macro_LPREFIX"));
			break;
		case cpp_parser::CppStringLiteralKinds::String:
			WriteString(vl::WString::Unmanaged(L"String"));
			break;
		default:
			WriteNull();
		}
		EndField();
		BeginField(vl::WString::Unmanaged(L"literal"));
		WriteToken(node->literal);
		EndField();
	}
	void AstVisitor::PrintFields(CppSwitchStat* node)
	{
		BeginField(vl::WString::Unmanaged(L"condition"));
		Print(node->condition.Obj());
		EndField();
		BeginField(vl::WString::Unmanaged(L"stat"));
		Print(node->stat.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(CppSysFuncExpr* node)
	{
		BeginField(vl::WString::Unmanaged(L"argument"));
		Print(node->argument.Obj());
		EndField();
		BeginField(vl::WString::Unmanaged(L"keyword"));
		WriteToken(node->keyword);
		EndField();
		BeginField(vl::WString::Unmanaged(L"variadic"));
		WriteToken(node->variadic);
		EndField();
	}
	void AstVisitor::PrintFields(CppTemplateDeclaration* node)
	{
		BeginField(vl::WString::Unmanaged(L"decl"));
		Print(node->decl.Obj());
		EndField();
		BeginField(vl::WString::Unmanaged(L"genericHeader"));
		Print(node->genericHeader.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(CppThrowExpr* node)
	{
		BeginField(vl::WString::Unmanaged(L"argument"));
		Print(node->argument.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(CppTryStat* node)
	{
		BeginField(vl::WString::Unmanaged(L"catchParts"));
		BeginArray();
		for (auto&& listItem : node->catchParts)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
		BeginField(vl::WString::Unmanaged(L"tryStat"));
		Print(node->tryStat.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(CppTryStatCatchPart* node)
	{
		BeginField(vl::WString::Unmanaged(L"decl"));
		Print(node->decl.Obj());
		EndField();
		BeginField(vl::WString::Unmanaged(L"stat"));
		Print(node->stat.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(CppTypeOnly* node)
	{
	}
	void AstVisitor::PrintFields(CppTypeOrExpr* node)
	{
	}
	void AstVisitor::PrintFields(CppTypeOrExprOrOthers* node)
	{
	}
	void AstVisitor::PrintFields(CppTypeOrExprOrOthersToResolve* node)
	{
		BeginField(vl::WString::Unmanaged(L"candidates"));
		BeginArray();
		for (auto&& listItem : node->candidates)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
	}
	void AstVisitor::PrintFields(CppTypeOrExprToResolve* node)
	{
		BeginField(vl::WString::Unmanaged(L"candidates"));
		BeginArray();
		for (auto&& listItem : node->candidates)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
	}
	void AstVisitor::PrintFields(CppTypedefDeclaration* node)
	{
		BeginField(vl::WString::Unmanaged(L"decl"));
		Print(node->decl.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(CppUsingNamespaceDeclaration* node)
	{
		BeginField(vl::WString::Unmanaged(L"names"));
		BeginArray();
		for (auto&& listItem : node->names)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
	}
	void AstVisitor::PrintFields(CppUsingTypeDeclaration* node)
	{
		BeginField(vl::WString::Unmanaged(L"name"));
		WriteToken(node->name);
		EndField();
		BeginField(vl::WString::Unmanaged(L"type"));
		Print(node->type.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(CppUsingValueDeclaration* node)
	{
		BeginField(vl::WString::Unmanaged(L"name"));
		Print(node->name.Obj());
		EndField();
		BeginField(vl::WString::Unmanaged(L"typenameKeyword"));
		WriteToken(node->typenameKeyword);
		EndField();
	}
	void AstVisitor::PrintFields(CppVarBraceInit* node)
	{
		BeginField(vl::WString::Unmanaged(L"arguments"));
		BeginArray();
		for (auto&& listItem : node->arguments)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
	}
	void AstVisitor::PrintFields(CppVarInit* node)
	{
	}
	void AstVisitor::PrintFields(CppVarParanthesisInit* node)
	{
		BeginField(vl::WString::Unmanaged(L"arguments"));
		BeginArray();
		for (auto&& listItem : node->arguments)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
	}
	void AstVisitor::PrintFields(CppVarStatInit* node)
	{
		BeginField(vl::WString::Unmanaged(L"initItems"));
		BeginArray();
		for (auto&& listItem : node->initItems)
		{
			BeginArrayItem();
			Print(listItem.Obj());
			EndArrayItem();
		}
		EndArray();
		EndField();
		BeginField(vl::WString::Unmanaged(L"stat"));
		Print(node->stat.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(CppVarStatInitItem* node)
	{
		BeginField(vl::WString::Unmanaged(L"init"));
		Print(node->init.Obj());
		EndField();
		BeginField(vl::WString::Unmanaged(L"name"));
		WriteToken(node->name);
		EndField();
	}
	void AstVisitor::PrintFields(CppVarValueInit* node)
	{
		BeginField(vl::WString::Unmanaged(L"expr"));
		Print(node->expr.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(CppVariablesDeclaration* node)
	{
		BeginField(vl::WString::Unmanaged(L"firstVarPart"));
		Print(node->firstVarPart.Obj());
		EndField();
		BeginField(vl::WString::Unmanaged(L"type"));
		Print(node->type.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(CppVariadicExpr* node)
	{
		BeginField(vl::WString::Unmanaged(L"operand"));
		Print(node->operand.Obj());
		EndField();
		BeginField(vl::WString::Unmanaged(L"variadic"));
		WriteToken(node->variadic);
		EndField();
	}
	void AstVisitor::PrintFields(CppVolatileType* node)
	{
		BeginField(vl::WString::Unmanaged(L"type"));
		Print(node->type.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(CppWhileStat* node)
	{
		BeginField(vl::WString::Unmanaged(L"condition"));
		Print(node->condition.Obj());
		EndField();
		BeginField(vl::WString::Unmanaged(L"stat"));
		Print(node->stat.Obj());
		EndField();
	}
	void AstVisitor::PrintFields(Cpp__LeaveStat* node)
	{
	}
	void AstVisitor::PrintFields(Cpp__TryStat* node)
	{
		BeginField(vl::WString::Unmanaged(L"exceptStat"));
		Print(node->exceptStat.Obj());
		EndField();
		BeginField(vl::WString::Unmanaged(L"filter"));
		Print(node->filter.Obj());
		EndField();
		BeginField(vl::WString::Unmanaged(L"finallyStat"));
		Print(node->finallyStat.Obj());
		EndField();
		BeginField(vl::WString::Unmanaged(L"tryStat"));
		Print(node->tryStat.Obj());
		EndField();
	}

	void AstVisitor::Visit(CppTypeOrExprOrOthersToResolve* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"TypeOrExprOrOthersToResolve"), node);
		PrintFields(static_cast<CppTypeOrExprOrOthers*>(node));
		PrintFields(static_cast<CppTypeOrExprOrOthersToResolve*>(node));
		EndObject();
	}

	void AstVisitor::Visit(CppDeclaration* node)
	{
		node->Accept(static_cast<CppDeclaration::IVisitor*>(this));
	}

	void AstVisitor::Visit(CppTypeOrExpr* node)
	{
		node->Accept(static_cast<CppTypeOrExpr::IVisitor*>(this));
	}

	void AstVisitor::Visit(CppOrdinaryGenericParameter* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"OrdinaryGenericParameter"), node);
		PrintFields(static_cast<CppTypeOrExprOrOthers*>(node));
		PrintFields(static_cast<CppOrdinaryGenericParameter*>(node));
		EndObject();
	}

	void AstVisitor::Visit(CppGenericArgument* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"GenericArgument"), node);
		PrintFields(static_cast<CppTypeOrExprOrOthers*>(node));
		PrintFields(static_cast<CppGenericArgument*>(node));
		EndObject();
	}

	void AstVisitor::Visit(CppDeclarationToResolve* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"DeclarationToResolve"), node);
		PrintFields(static_cast<CppTypeOrExprOrOthers*>(node));
		PrintFields(static_cast<CppDeclaration*>(node));
		PrintFields(static_cast<CppDeclarationToResolve*>(node));
		EndObject();
	}

	void AstVisitor::Visit(CppDeclarationCommon* node)
	{
		node->Accept(static_cast<CppDeclarationCommon::IVisitor*>(this));
	}

	void AstVisitor::Visit(CppVariablesDeclaration* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"VariablesDeclaration"), node);
		PrintFields(static_cast<CppTypeOrExprOrOthers*>(node));
		PrintFields(static_cast<CppDeclaration*>(node));
		PrintFields(static_cast<CppDeclarationCommon*>(node));
		PrintFields(static_cast<CppVariablesDeclaration*>(node));
		EndObject();
	}

	void AstVisitor::Visit(CppClassDeclaration* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"ClassDeclaration"), node);
		PrintFields(static_cast<CppTypeOrExprOrOthers*>(node));
		PrintFields(static_cast<CppDeclaration*>(node));
		PrintFields(static_cast<CppDeclarationCommon*>(node));
		PrintFields(static_cast<CppClassDeclaration*>(node));
		EndObject();
	}

	void AstVisitor::Visit(CppEnumDeclaration* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"EnumDeclaration"), node);
		PrintFields(static_cast<CppTypeOrExprOrOthers*>(node));
		PrintFields(static_cast<CppDeclaration*>(node));
		PrintFields(static_cast<CppDeclarationCommon*>(node));
		PrintFields(static_cast<CppEnumDeclaration*>(node));
		EndObject();
	}

	void AstVisitor::Visit(CppTemplateDeclaration* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"TemplateDeclaration"), node);
		PrintFields(static_cast<CppTypeOrExprOrOthers*>(node));
		PrintFields(static_cast<CppDeclaration*>(node));
		PrintFields(static_cast<CppDeclarationCommon*>(node));
		PrintFields(static_cast<CppTemplateDeclaration*>(node));
		EndObject();
	}

	void AstVisitor::Visit(CppStaticAssertDeclaration* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"StaticAssertDeclaration"), node);
		PrintFields(static_cast<CppTypeOrExprOrOthers*>(node));
		PrintFields(static_cast<CppDeclaration*>(node));
		PrintFields(static_cast<CppDeclarationCommon*>(node));
		PrintFields(static_cast<CppStaticAssertDeclaration*>(node));
		EndObject();
	}

	void AstVisitor::Visit(CppTypedefDeclaration* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"TypedefDeclaration"), node);
		PrintFields(static_cast<CppTypeOrExprOrOthers*>(node));
		PrintFields(static_cast<CppDeclaration*>(node));
		PrintFields(static_cast<CppDeclarationCommon*>(node));
		PrintFields(static_cast<CppTypedefDeclaration*>(node));
		EndObject();
	}

	void AstVisitor::Visit(CppExternDeclaration* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"ExternDeclaration"), node);
		PrintFields(static_cast<CppTypeOrExprOrOthers*>(node));
		PrintFields(static_cast<CppDeclaration*>(node));
		PrintFields(static_cast<CppDeclarationCommon*>(node));
		PrintFields(static_cast<CppExternDeclaration*>(node));
		EndObject();
	}

	void AstVisitor::Visit(CppNamespaceDeclaration* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"NamespaceDeclaration"), node);
		PrintFields(static_cast<CppTypeOrExprOrOthers*>(node));
		PrintFields(static_cast<CppDeclaration*>(node));
		PrintFields(static_cast<CppDeclarationCommon*>(node));
		PrintFields(static_cast<CppNamespaceDeclaration*>(node));
		EndObject();
	}

	void AstVisitor::Visit(CppUsingNamespaceDeclaration* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"UsingNamespaceDeclaration"), node);
		PrintFields(static_cast<CppTypeOrExprOrOthers*>(node));
		PrintFields(static_cast<CppDeclaration*>(node));
		PrintFields(static_cast<CppDeclarationCommon*>(node));
		PrintFields(static_cast<CppUsingNamespaceDeclaration*>(node));
		EndObject();
	}

	void AstVisitor::Visit(CppUsingValueDeclaration* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"UsingValueDeclaration"), node);
		PrintFields(static_cast<CppTypeOrExprOrOthers*>(node));
		PrintFields(static_cast<CppDeclaration*>(node));
		PrintFields(static_cast<CppDeclarationCommon*>(node));
		PrintFields(static_cast<CppUsingValueDeclaration*>(node));
		EndObject();
	}

	void AstVisitor::Visit(CppUsingTypeDeclaration* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"UsingTypeDeclaration"), node);
		PrintFields(static_cast<CppTypeOrExprOrOthers*>(node));
		PrintFields(static_cast<CppDeclaration*>(node));
		PrintFields(static_cast<CppDeclarationCommon*>(node));
		PrintFields(static_cast<CppUsingTypeDeclaration*>(node));
		EndObject();
	}

	void AstVisitor::Visit(CppFriendTypeDeclaration* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"FriendTypeDeclaration"), node);
		PrintFields(static_cast<CppTypeOrExprOrOthers*>(node));
		PrintFields(static_cast<CppDeclaration*>(node));
		PrintFields(static_cast<CppDeclarationCommon*>(node));
		PrintFields(static_cast<CppFriendTypeDeclaration*>(node));
		EndObject();
	}

	void AstVisitor::Visit(CppTypeOrExprToResolve* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"TypeOrExprToResolve"), node);
		PrintFields(static_cast<CppTypeOrExprOrOthers*>(node));
		PrintFields(static_cast<CppTypeOrExpr*>(node));
		PrintFields(static_cast<CppTypeOrExprToResolve*>(node));
		EndObject();
	}

	void AstVisitor::Visit(CppExprOnly* node)
	{
		node->Accept(static_cast<CppExprOnly::IVisitor*>(this));
	}

	void AstVisitor::Visit(CppTypeOnly* node)
	{
		node->Accept(static_cast<CppTypeOnly::IVisitor*>(this));
	}

	void AstVisitor::Visit(CppQualifiedName* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"QualifiedName"), node);
		PrintFields(static_cast<CppTypeOrExprOrOthers*>(node));
		PrintFields(static_cast<CppTypeOrExpr*>(node));
		PrintFields(static_cast<CppQualifiedName*>(node));
		EndObject();
	}

	void AstVisitor::Visit(CppDeclaratorType* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"DeclaratorType"), node);
		PrintFields(static_cast<CppTypeOrExprOrOthers*>(node));
		PrintFields(static_cast<CppTypeOrExpr*>(node));
		PrintFields(static_cast<CppDeclaratorType*>(node));
		EndObject();
	}

	void AstVisitor::Visit(CppPrimitiveExprLiteral* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"PrimitiveExprLiteral"), node);
		PrintFields(static_cast<CppTypeOrExprOrOthers*>(node));
		PrintFields(static_cast<CppTypeOrExpr*>(node));
		PrintFields(static_cast<CppExprOnly*>(node));
		PrintFields(static_cast<CppPrimitiveExprLiteral*>(node));
		EndObject();
	}

	void AstVisitor::Visit(CppNumericExprLiteral* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"NumericExprLiteral"), node);
		PrintFields(static_cast<CppTypeOrExprOrOthers*>(node));
		PrintFields(static_cast<CppTypeOrExpr*>(node));
		PrintFields(static_cast<CppExprOnly*>(node));
		PrintFields(static_cast<CppNumericExprLiteral*>(node));
		EndObject();
	}

	void AstVisitor::Visit(CppStringLiteral* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"StringLiteral"), node);
		PrintFields(static_cast<CppTypeOrExprOrOthers*>(node));
		PrintFields(static_cast<CppTypeOrExpr*>(node));
		PrintFields(static_cast<CppExprOnly*>(node));
		PrintFields(static_cast<CppStringLiteral*>(node));
		EndObject();
	}

	void AstVisitor::Visit(CppLambdaExpr* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"LambdaExpr"), node);
		PrintFields(static_cast<CppTypeOrExprOrOthers*>(node));
		PrintFields(static_cast<CppTypeOrExpr*>(node));
		PrintFields(static_cast<CppExprOnly*>(node));
		PrintFields(static_cast<CppLambdaExpr*>(node));
		EndObject();
	}

	void AstVisitor::Visit(CppParenthesisExpr* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"ParenthesisExpr"), node);
		PrintFields(static_cast<CppTypeOrExprOrOthers*>(node));
		PrintFields(static_cast<CppTypeOrExpr*>(node));
		PrintFields(static_cast<CppExprOnly*>(node));
		PrintFields(static_cast<CppParenthesisExpr*>(node));
		EndObject();
	}

	void AstVisitor::Visit(CppBraceExpr* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"BraceExpr"), node);
		PrintFields(static_cast<CppTypeOrExprOrOthers*>(node));
		PrintFields(static_cast<CppTypeOrExpr*>(node));
		PrintFields(static_cast<CppExprOnly*>(node));
		PrintFields(static_cast<CppBraceExpr*>(node));
		EndObject();
	}

	void AstVisitor::Visit(CppCastExpr* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"CastExpr"), node);
		PrintFields(static_cast<CppTypeOrExprOrOthers*>(node));
		PrintFields(static_cast<CppTypeOrExpr*>(node));
		PrintFields(static_cast<CppExprOnly*>(node));
		PrintFields(static_cast<CppCastExpr*>(node));
		EndObject();
	}

	void AstVisitor::Visit(CppSysFuncExpr* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"SysFuncExpr"), node);
		PrintFields(static_cast<CppTypeOrExprOrOthers*>(node));
		PrintFields(static_cast<CppTypeOrExpr*>(node));
		PrintFields(static_cast<CppExprOnly*>(node));
		PrintFields(static_cast<CppSysFuncExpr*>(node));
		EndObject();
	}

	void AstVisitor::Visit(CppSizeofExpr* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"SizeofExpr"), node);
		PrintFields(static_cast<CppTypeOrExprOrOthers*>(node));
		PrintFields(static_cast<CppTypeOrExpr*>(node));
		PrintFields(static_cast<CppExprOnly*>(node));
		PrintFields(static_cast<CppSizeofExpr*>(node));
		EndObject();
	}

	void AstVisitor::Visit(CppDeleteExpr* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"DeleteExpr"), node);
		PrintFields(static_cast<CppTypeOrExprOrOthers*>(node));
		PrintFields(static_cast<CppTypeOrExpr*>(node));
		PrintFields(static_cast<CppExprOnly*>(node));
		PrintFields(static_cast<CppDeleteExpr*>(node));
		EndObject();
	}

	void AstVisitor::Visit(CppNewExpr* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"NewExpr"), node);
		PrintFields(static_cast<CppTypeOrExprOrOthers*>(node));
		PrintFields(static_cast<CppTypeOrExpr*>(node));
		PrintFields(static_cast<CppExprOnly*>(node));
		PrintFields(static_cast<CppNewExpr*>(node));
		EndObject();
	}

	void AstVisitor::Visit(CppPrefixUnaryExpr* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"PrefixUnaryExpr"), node);
		PrintFields(static_cast<CppTypeOrExprOrOthers*>(node));
		PrintFields(static_cast<CppTypeOrExpr*>(node));
		PrintFields(static_cast<CppExprOnly*>(node));
		PrintFields(static_cast<CppPrefixUnaryExpr*>(node));
		EndObject();
	}

	void AstVisitor::Visit(CppPostfixUnaryExpr* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"PostfixUnaryExpr"), node);
		PrintFields(static_cast<CppTypeOrExprOrOthers*>(node));
		PrintFields(static_cast<CppTypeOrExpr*>(node));
		PrintFields(static_cast<CppExprOnly*>(node));
		PrintFields(static_cast<CppPostfixUnaryExpr*>(node));
		EndObject();
	}

	void AstVisitor::Visit(CppIndexExpr* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"IndexExpr"), node);
		PrintFields(static_cast<CppTypeOrExprOrOthers*>(node));
		PrintFields(static_cast<CppTypeOrExpr*>(node));
		PrintFields(static_cast<CppExprOnly*>(node));
		PrintFields(static_cast<CppIndexExpr*>(node));
		EndObject();
	}

	void AstVisitor::Visit(CppCallExpr* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"CallExpr"), node);
		PrintFields(static_cast<CppTypeOrExprOrOthers*>(node));
		PrintFields(static_cast<CppTypeOrExpr*>(node));
		PrintFields(static_cast<CppExprOnly*>(node));
		PrintFields(static_cast<CppCallExpr*>(node));
		EndObject();
	}

	void AstVisitor::Visit(CppBinaryExpr* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"BinaryExpr"), node);
		PrintFields(static_cast<CppTypeOrExprOrOthers*>(node));
		PrintFields(static_cast<CppTypeOrExpr*>(node));
		PrintFields(static_cast<CppExprOnly*>(node));
		PrintFields(static_cast<CppBinaryExpr*>(node));
		EndObject();
	}

	void AstVisitor::Visit(CppIfExpr* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"IfExpr"), node);
		PrintFields(static_cast<CppTypeOrExprOrOthers*>(node));
		PrintFields(static_cast<CppTypeOrExpr*>(node));
		PrintFields(static_cast<CppExprOnly*>(node));
		PrintFields(static_cast<CppIfExpr*>(node));
		EndObject();
	}

	void AstVisitor::Visit(CppThrowExpr* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"ThrowExpr"), node);
		PrintFields(static_cast<CppTypeOrExprOrOthers*>(node));
		PrintFields(static_cast<CppTypeOrExpr*>(node));
		PrintFields(static_cast<CppExprOnly*>(node));
		PrintFields(static_cast<CppThrowExpr*>(node));
		EndObject();
	}

	void AstVisitor::Visit(CppVariadicExpr* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"VariadicExpr"), node);
		PrintFields(static_cast<CppTypeOrExprOrOthers*>(node));
		PrintFields(static_cast<CppTypeOrExpr*>(node));
		PrintFields(static_cast<CppExprOnly*>(node));
		PrintFields(static_cast<CppVariadicExpr*>(node));
		EndObject();
	}

	void AstVisitor::Visit(CppPrimitiveType* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"PrimitiveType"), node);
		PrintFields(static_cast<CppTypeOrExprOrOthers*>(node));
		PrintFields(static_cast<CppTypeOrExpr*>(node));
		PrintFields(static_cast<CppTypeOnly*>(node));
		PrintFields(static_cast<CppPrimitiveType*>(node));
		EndObject();
	}

	void AstVisitor::Visit(CppConstType* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"ConstType"), node);
		PrintFields(static_cast<CppTypeOrExprOrOthers*>(node));
		PrintFields(static_cast<CppTypeOrExpr*>(node));
		PrintFields(static_cast<CppTypeOnly*>(node));
		PrintFields(static_cast<CppConstType*>(node));
		EndObject();
	}

	void AstVisitor::Visit(CppVolatileType* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"VolatileType"), node);
		PrintFields(static_cast<CppTypeOrExprOrOthers*>(node));
		PrintFields(static_cast<CppTypeOrExpr*>(node));
		PrintFields(static_cast<CppTypeOnly*>(node));
		PrintFields(static_cast<CppVolatileType*>(node));
		EndObject();
	}

	void AstVisitor::Visit(CppStatementToResolve* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"StatementToResolve"), node);
		PrintFields(static_cast<CppStatement*>(node));
		PrintFields(static_cast<CppStatementToResolve*>(node));
		EndObject();
	}

	void AstVisitor::Visit(CppEmptyStat* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"EmptyStat"), node);
		PrintFields(static_cast<CppStatement*>(node));
		PrintFields(static_cast<CppEmptyStat*>(node));
		EndObject();
	}

	void AstVisitor::Visit(CppBlockStat* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"BlockStat"), node);
		PrintFields(static_cast<CppStatement*>(node));
		PrintFields(static_cast<CppBlockStat*>(node));
		EndObject();
	}

	void AstVisitor::Visit(CppExprStat* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"ExprStat"), node);
		PrintFields(static_cast<CppStatement*>(node));
		PrintFields(static_cast<CppExprStat*>(node));
		EndObject();
	}

	void AstVisitor::Visit(CppDeclStat* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"DeclStat"), node);
		PrintFields(static_cast<CppStatement*>(node));
		PrintFields(static_cast<CppDeclStat*>(node));
		EndObject();
	}

	void AstVisitor::Visit(CppBreakStat* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"BreakStat"), node);
		PrintFields(static_cast<CppStatement*>(node));
		PrintFields(static_cast<CppBreakStat*>(node));
		EndObject();
	}

	void AstVisitor::Visit(CppContinueStat* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"ContinueStat"), node);
		PrintFields(static_cast<CppStatement*>(node));
		PrintFields(static_cast<CppContinueStat*>(node));
		EndObject();
	}

	void AstVisitor::Visit(CppReturnStat* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"ReturnStat"), node);
		PrintFields(static_cast<CppStatement*>(node));
		PrintFields(static_cast<CppReturnStat*>(node));
		EndObject();
	}

	void AstVisitor::Visit(CppLabelStat* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"LabelStat"), node);
		PrintFields(static_cast<CppStatement*>(node));
		PrintFields(static_cast<CppLabelStat*>(node));
		EndObject();
	}

	void AstVisitor::Visit(CppGotoStat* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"GotoStat"), node);
		PrintFields(static_cast<CppStatement*>(node));
		PrintFields(static_cast<CppGotoStat*>(node));
		EndObject();
	}

	void AstVisitor::Visit(CppCaseStat* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"CaseStat"), node);
		PrintFields(static_cast<CppStatement*>(node));
		PrintFields(static_cast<CppCaseStat*>(node));
		EndObject();
	}

	void AstVisitor::Visit(CppDefaultStat* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"DefaultStat"), node);
		PrintFields(static_cast<CppStatement*>(node));
		PrintFields(static_cast<CppDefaultStat*>(node));
		EndObject();
	}

	void AstVisitor::Visit(Cpp__LeaveStat* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"__LeaveStat"), node);
		PrintFields(static_cast<CppStatement*>(node));
		PrintFields(static_cast<Cpp__LeaveStat*>(node));
		EndObject();
	}

	void AstVisitor::Visit(CppWhileStat* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"WhileStat"), node);
		PrintFields(static_cast<CppStatement*>(node));
		PrintFields(static_cast<CppWhileStat*>(node));
		EndObject();
	}

	void AstVisitor::Visit(CppDoWhileStat* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"DoWhileStat"), node);
		PrintFields(static_cast<CppStatement*>(node));
		PrintFields(static_cast<CppDoWhileStat*>(node));
		EndObject();
	}

	void AstVisitor::Visit(CppIfElseStat* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"IfElseStat"), node);
		PrintFields(static_cast<CppStatement*>(node));
		PrintFields(static_cast<CppIfElseStat*>(node));
		EndObject();
	}

	void AstVisitor::Visit(CppForStat* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"ForStat"), node);
		PrintFields(static_cast<CppStatement*>(node));
		PrintFields(static_cast<CppForStat*>(node));
		EndObject();
	}

	void AstVisitor::Visit(CppSwitchStat* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"SwitchStat"), node);
		PrintFields(static_cast<CppStatement*>(node));
		PrintFields(static_cast<CppSwitchStat*>(node));
		EndObject();
	}

	void AstVisitor::Visit(CppTryStat* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"TryStat"), node);
		PrintFields(static_cast<CppStatement*>(node));
		PrintFields(static_cast<CppTryStat*>(node));
		EndObject();
	}

	void AstVisitor::Visit(Cpp__TryStat* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"__TryStat"), node);
		PrintFields(static_cast<CppStatement*>(node));
		PrintFields(static_cast<Cpp__TryStat*>(node));
		EndObject();
	}

	void AstVisitor::Visit(CppNameIdentifier* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"NameIdentifier"), node);
		PrintFields(static_cast<CppIdentifier*>(node));
		PrintFields(static_cast<CppNameIdentifier*>(node));
		EndObject();
	}

	void AstVisitor::Visit(CppOperatorIdentifier* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"OperatorIdentifier"), node);
		PrintFields(static_cast<CppIdentifier*>(node));
		PrintFields(static_cast<CppOperatorIdentifier*>(node));
		EndObject();
	}

	void AstVisitor::Visit(CppOperatorTypeIdentifier* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"OperatorTypeIdentifier"), node);
		PrintFields(static_cast<CppIdentifier*>(node));
		PrintFields(static_cast<CppOperatorTypeIdentifier*>(node));
		EndObject();
	}

	void AstVisitor::Visit(CppDeclaratorFunctionPartToResolve* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"DeclaratorFunctionPartToResolve"), node);
		PrintFields(static_cast<CppDeclaratorFunctionPart*>(node));
		PrintFields(static_cast<CppDeclaratorFunctionPartToResolve*>(node));
		EndObject();
	}

	void AstVisitor::Visit(CppDeclaratorFunctionPartCommon* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"DeclaratorFunctionPartCommon"), node);
		PrintFields(static_cast<CppDeclaratorFunctionPart*>(node));
		PrintFields(static_cast<CppDeclaratorFunctionPartCommon*>(node));
		EndObject();
	}

	void AstVisitor::Visit(CppVarValueInit* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"VarValueInit"), node);
		PrintFields(static_cast<CppVarInit*>(node));
		PrintFields(static_cast<CppVarValueInit*>(node));
		EndObject();
	}

	void AstVisitor::Visit(CppVarParanthesisInit* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"VarParanthesisInit"), node);
		PrintFields(static_cast<CppVarInit*>(node));
		PrintFields(static_cast<CppVarParanthesisInit*>(node));
		EndObject();
	}

	void AstVisitor::Visit(CppVarBraceInit* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"VarBraceInit"), node);
		PrintFields(static_cast<CppVarInit*>(node));
		PrintFields(static_cast<CppVarBraceInit*>(node));
		EndObject();
	}

	void AstVisitor::Visit(CppVarStatInit* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"VarStatInit"), node);
		PrintFields(static_cast<CppVarInit*>(node));
		PrintFields(static_cast<CppVarStatInit*>(node));
		EndObject();
	}

	void AstVisitor::Visit(CppDeclaratorVariablePartToResolve* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"DeclaratorVariablePartToResolve"), node);
		PrintFields(static_cast<CppDeclaratorVariablePart*>(node));
		PrintFields(static_cast<CppDeclaratorVariablePartToResolve*>(node));
		EndObject();
	}

	void AstVisitor::Visit(CppDeclaratorVariablePartCommon* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"DeclaratorVariablePartCommon"), node);
		PrintFields(static_cast<CppDeclaratorVariablePart*>(node));
		PrintFields(static_cast<CppDeclaratorVariablePartCommon*>(node));
		EndObject();
	}

	void AstVisitor::Visit(CppForStatLoopCondition* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"ForStatLoopCondition"), node);
		PrintFields(static_cast<CppForStatConditionPart*>(node));
		PrintFields(static_cast<CppForStatLoopCondition*>(node));
		EndObject();
	}

	void AstVisitor::Visit(CppForStatIterateCondition* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"ForStatIterateCondition"), node);
		PrintFields(static_cast<CppForStatConditionPart*>(node));
		PrintFields(static_cast<CppForStatIterateCondition*>(node));
		EndObject();
	}

	AstVisitor::AstVisitor(vl::stream::StreamWriter& _writer)
		: vl::glr::JsonVisitorBase(_writer)
	{
	}

	void AstVisitor::Print(CppTypeOrExprOrOthers* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		node->Accept(static_cast<CppTypeOrExprOrOthers::IVisitor*>(this));
	}

	void AstVisitor::Print(CppStatement* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		node->Accept(static_cast<CppStatement::IVisitor*>(this));
	}

	void AstVisitor::Print(CppIdentifier* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		node->Accept(static_cast<CppIdentifier::IVisitor*>(this));
	}

	void AstVisitor::Print(CppDeclaratorFunctionPart* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		node->Accept(static_cast<CppDeclaratorFunctionPart::IVisitor*>(this));
	}

	void AstVisitor::Print(CppVarInit* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		node->Accept(static_cast<CppVarInit::IVisitor*>(this));
	}

	void AstVisitor::Print(CppDeclaratorVariablePart* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		node->Accept(static_cast<CppDeclaratorVariablePart::IVisitor*>(this));
	}

	void AstVisitor::Print(CppForStatConditionPart* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		node->Accept(static_cast<CppForStatConditionPart::IVisitor*>(this));
	}

	void AstVisitor::Print(CppGenericHeader* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"GenericHeader"), node);
		PrintFields(static_cast<CppGenericHeader*>(node));
		EndObject();
	}

	void AstVisitor::Print(CppFile* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"File"), node);
		PrintFields(static_cast<CppFile*>(node));
		EndObject();
	}

	void AstVisitor::Print(CppGenericArguments* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"GenericArguments"), node);
		PrintFields(static_cast<CppGenericArguments*>(node));
		EndObject();
	}

	void AstVisitor::Print(CppStringLiteralFragment* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"StringLiteralFragment"), node);
		PrintFields(static_cast<CppStringLiteralFragment*>(node));
		EndObject();
	}

	void AstVisitor::Print(CppLambdaCapture* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"LambdaCapture"), node);
		PrintFields(static_cast<CppLambdaCapture*>(node));
		EndObject();
	}

	void AstVisitor::Print(CppAdvancedType* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"AdvancedType"), node);
		PrintFields(static_cast<CppAdvancedType*>(node));
		EndObject();
	}

	void AstVisitor::Print(CppDeclaratorKeyword* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"DeclaratorKeyword"), node);
		PrintFields(static_cast<CppDeclaratorKeyword*>(node));
		EndObject();
	}

	void AstVisitor::Print(CppFunctionKeyword* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"FunctionKeyword"), node);
		PrintFields(static_cast<CppFunctionKeyword*>(node));
		EndObject();
	}

	void AstVisitor::Print(CppDeclaratorArrayPart* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"DeclaratorArrayPart"), node);
		PrintFields(static_cast<CppDeclaratorArrayPart*>(node));
		EndObject();
	}

	void AstVisitor::Print(CppDeclarator* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"Declarator"), node);
		PrintFields(static_cast<CppDeclarator*>(node));
		EndObject();
	}

	void AstVisitor::Print(CppVarStatInitItem* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"VarStatInitItem"), node);
		PrintFields(static_cast<CppVarStatInitItem*>(node));
		EndObject();
	}

	void AstVisitor::Print(CppClassInheritance* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"ClassInheritance"), node);
		PrintFields(static_cast<CppClassInheritance*>(node));
		EndObject();
	}

	void AstVisitor::Print(CppClassMemberPart* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"ClassMemberPart"), node);
		PrintFields(static_cast<CppClassMemberPart*>(node));
		EndObject();
	}

	void AstVisitor::Print(CppClassBody* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"ClassBody"), node);
		PrintFields(static_cast<CppClassBody*>(node));
		EndObject();
	}

	void AstVisitor::Print(CppEnumItem* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"EnumItem"), node);
		PrintFields(static_cast<CppEnumItem*>(node));
		EndObject();
	}

	void AstVisitor::Print(CppEnumBody* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"EnumBody"), node);
		PrintFields(static_cast<CppEnumBody*>(node));
		EndObject();
	}

	void AstVisitor::Print(CppNamespaceName* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"NamespaceName"), node);
		PrintFields(static_cast<CppNamespaceName*>(node));
		EndObject();
	}

	void AstVisitor::Print(CppTryStatCatchPart* node)
	{
		if (!node)
		{
			WriteNull();
			return;
		}
		BeginObject();
		WriteType(vl::WString::Unmanaged(L"TryStatCatchPart"), node);
		PrintFields(static_cast<CppTryStatCatchPart*>(node));
		EndObject();
	}

}
